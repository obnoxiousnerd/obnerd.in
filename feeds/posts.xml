<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title/><subtitle/><link href="" rel="self"/><link href=""/><generator uri="https://11ty.dev" version="2.0.0">Eleventy v2.0.0</generator><updated>2022-03-23T00:00:00Z</updated><id/><author><name/><email/></author><rights>© CC BY-NC-SA 4.0 2020-2022 Pranav Karawale</rights><category term="technology"/><entry><title>Moving from Windows to Fedora</title><link href="/posts/moving-from-windows-to-fedora/"/><updated>2022-08-02T00:00:00Z</updated><id>/posts/moving-from-windows-to-fedora/</id><content type="html">&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;
&lt;p&gt;The motives behind this was to&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Understand my system better (working with UEFI, Secure boot, etc)&lt;/li&gt;
&lt;li&gt;Simplify my developing experience, as most of my stuff runs on &lt;del&gt;Linux&lt;/del&gt; WSL&lt;/li&gt;
&lt;li&gt;Not send tons of telemetry to Microsoft&lt;/li&gt;
&lt;li&gt;Make my system configurable to my liking (eg. stuff going on in r/unixporn)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;fedora-test-drive&quot;&gt;Fedora test-drive&lt;/h2&gt;
&lt;p&gt;I downloaded the KDE spin of Fedora 36 since I had some previous memories with
KDE distros in Virtualbox and then live-booted to it. It was exactly what I
thought it would be but KDE was looking overwhelming and less polished (the
defaults) to me. So I then tried out the GNOME one, Fedora 36 Workstation, and
it was pretty much what I&#39;d like to use and be productive daily without spending
days to customize it to my liking. GNOME simply has better UI defaults, IMO. The
one thing I noticed was that Wi-Fi was not behaving normally. The connection
dropped randomly, then the Wi-Fi card would disable and re-enable. I thought
this would need work and moved on. Much much later, I found out that the builtin
kernel drivers for Realtek Wi-Fi cards are
&lt;a href=&quot;https://unix.stackexchange.com/questions/690485/realtek-driver-randomly-stops-working&quot;&gt;not the best ones&lt;/a&gt;
and that I need a custom one.
Also, no hate for KDE, I like them and their app ecosystem.&lt;/p&gt;
&lt;h2 id=&quot;backups&quot;&gt;Backups&lt;/h2&gt;
&lt;p&gt;Before going any further, it was necessary for me to backup my stuff. For my
programming projects, I ran &lt;a href=&quot;https://npmjs.com/npkill&quot;&gt;&lt;code&gt;npkill&lt;/code&gt;&lt;/a&gt; to remove
&lt;code&gt;node_modules&lt;/code&gt; which I don&#39;t need in the backup. There was also one Python
project using &lt;code&gt;venv&lt;/code&gt; which was contributing a big chunk to the backup size. For
that, it received the same treatment except here the &lt;code&gt;.venv&lt;/code&gt; directory was
removed. I decided to test brotli for backups, and so ran these:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;tar -cvf Programming.tar Programming/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;brotli -j Programming.tar&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which gives a &lt;code&gt;Programming.tar.br&lt;/code&gt; and gave decent results compression wise, I&#39;d
say. For backing up keys, I followed a similar procedure. I created the
following directory structure:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;keys-backup/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;├── gpg&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;└── ssh&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;ssh/&lt;/code&gt;, contents of &lt;code&gt;~/.ssh&lt;/code&gt; were tossed into. For &lt;code&gt;gpg/&lt;/code&gt;, I followed
&lt;a href=&quot;https://www.jwillikers.com/backup-and-restore-a-gpg-key&quot;&gt;this excellent guide&lt;/a&gt;
to export my GPG keys. The resulting directory:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;keys-backup/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;├── gpg&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;│   ├── priv.asc&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;│   ├── pub.asc&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;│   └── trustdb.txt&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;└── ssh&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;    ├── config&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;    ├── gh_codespaces.id_ed25519&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;    ├── gh_codespaces.id_ed25519.pub&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;    ├── github.id_ed25519&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;    ├── github.id_ed25519.pub&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;    ├── id_ed25519&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;    ├── id_ed25519.pub&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;    ├── known_hosts&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;    ├── known_hosts.old&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;    ├── srht.id_ed25519&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;    └── srht.id_ed25519.pub&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This was then converted into a &lt;code&gt;.tar.br&lt;/code&gt; using the commands used previously.
These &lt;code&gt;.tar.br&lt;/code&gt; files were then copied to &lt;a href=&quot;https://mega.io&quot;&gt;MEGA&lt;/a&gt; and a flash
drive.&lt;/p&gt;
&lt;p&gt;For pictures and videos, I didn&#39;t really had much pictures to backup, most of
them were screenshots that can be safely left behind; didn&#39;t need them. I had
videos of some work that I had done in school, so they and the remaining
pictures went into a &lt;a href=&quot;https://www.7-zip.org/&quot;&gt;7-Zip&lt;/a&gt; archive which was then
transferred to the flash drive.&lt;/p&gt;
&lt;h2 id=&quot;windows-recovery-drive&quot;&gt;Windows recovery drive&lt;/h2&gt;
&lt;p&gt;I was ready to jump ship, but before that, I decided I would make a Windows
recovery drive, &lt;em&gt;just in case&lt;/em&gt;. So I ordered
&lt;a href=&quot;https://www.flipkart.com/sandisk-ultra-flair-usb-3-0-32-gb-pen-drive/p/itmcf7d79b775c99&quot;&gt;this flash drive&lt;/a&gt;
and in the mean time, read up on other things regarding installing Fedora.
After it came, I immediately created a Windows recovery drive on it. It took
almost 16 gigabytes of space and took almost 3 hours to complete. If the
recovery drive isn&#39;t used for a long period of time, I will eventually
clean it and start using it for normal usage.&lt;/p&gt;
&lt;h2 id=&quot;decisions-to-be-made&quot;&gt;Decisions to be made&lt;/h2&gt;
&lt;h3 id=&quot;luks&quot;&gt;LUKS&lt;/h3&gt;
&lt;p&gt;This was a no-brainer, I previously used
&lt;a href=&quot;https://en.wikipedia.org/wiki/BitLocker&quot;&gt;Bitlocker&lt;/a&gt; with the TPM chip which
came with in my laptop. I also figured out
&lt;a href=&quot;https://docs.fedoraproject.org/en-US/quick-docs/encrypting-drives-using-LUKS/&quot;&gt;Fedora supports LUKS&lt;/a&gt;
and decided to configure it during the installation.&lt;/p&gt;
&lt;h3 id=&quot;secure-boot&quot;&gt;Secure Boot&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;To secure boot, or not to secure boot, that is the question.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;From previous sections, it was clear that I needed to install a custom driver,
and also read that it&#39;d be a little different procedure to install it. To do
this on a secure boot enabled system, you can either&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Don&#39;t secure boot and install the driver&lt;/li&gt;
&lt;li&gt;Enroll your own keys in the MOK and sign the driver before installing it&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://www.fsf.org/campaigns/campaigns/secure-boot-vs-restricted-boot&quot;&gt;Some sources&lt;/a&gt;
convey that Secure Boot might be one of Microsoft&#39;s shenanigans, while
&lt;a href=&quot;https://superuser.com/a/1368702&quot;&gt;some&lt;/a&gt; suggest legitimate reasons to use it. So turning
to Fedora, its said
&lt;a href=&quot;https://docs.fedoraproject.org/en-US/fedora/latest/system-administrators-guide/kernel-module-driver-configuration/Working_with_the_GRUB_2_Boot_Loader/#sec-UEFI_Secure_Boot_Support_in_Fedora&quot;&gt;in the docs&lt;/a&gt;
that it supports Secure boot, so time to go ahead. Also,
&lt;a href=&quot;https://github.com/tomaspinho/rtl8821ce/issues/280&quot;&gt;one of the &quot;issues&quot;&lt;/a&gt;
posted on a &lt;a href=&quot;https://github.com/tomaspinho/rtl8821ce&quot;&gt;custom Realtek Wi-Fi driver&lt;/a&gt;
I was eyeing, they claimed the driver can be installed on Secure Boot and also
kindly offered advice on how to install it. This all boils down to one
conclusion: not bad at all to install with Secure Boot enabled.&lt;/p&gt;
&lt;h3 id=&quot;dual-booting&quot;&gt;Dual booting&lt;/h3&gt;
&lt;p&gt;No. I wanted my full drive for Fedora.&lt;/p&gt;
&lt;h2 id=&quot;installing-fedora&quot;&gt;Installing Fedora&lt;/h2&gt;
&lt;p&gt;The Fedora Workstation image I previously live-booted from will be the one from
which I can install Fedora. This image was stored in an old Transcend 4GB
JetFlash-400 flash drive which was chilling in dust. For HP laptops, I had to
spam F9 during the boot process to interrupt it and choose a boot device. This
is not similar to changing the boot device order since that changes it
permanently while this is only for the current boot. Nevertheless, I booted to
Fedora successfully and then proceeded with the installation process.&lt;/p&gt;
&lt;p&gt;Before proceeding with the install,
&lt;a href=&quot;https://fosstodon.org/web/@retronav/108742362070065915&quot;&gt;I asked&lt;/a&gt;
folks on the Fediverse if they had some words of advice for me. And they
&lt;a href=&quot;https://fosstodon.org/@mxu/108742493483156516&quot;&gt;didn&#39;t&lt;/a&gt;
&lt;a href=&quot;https://fosstodon.org/@benjaminhollon/108742861835203831&quot;&gt;let&lt;/a&gt;
&lt;a href=&quot;https://fosstodon.org/@allinone0/108743085063947317&quot;&gt;me&lt;/a&gt;
down.&lt;/p&gt;
&lt;p&gt;Most of what I did is shown in this
&lt;a href=&quot;https://yewtu.be/watch?v=vNX764kURb8&quot;&gt;excellent tutorial&lt;/a&gt; by Adam Turner, with
a little bit of difference in some steps. I also chose &quot;Custom Storage
Configuration&quot; like Adam does in the video. Since I had a bit of exposure to
data partitions, I made no mistake in yeeting the Windows partitions and
installing a brtfs layout on the whole SSD. There was also an option to encrypt
my drive with LUKS, which I did. With that, it had correctly identified my
keyboard layout and time zone, so was time to begin the installtion. It hardly
took 10 minutes, and after that I was straight into my laptop running Fedora. As
someone who has hardly had exposure to devices running Linux distros bare-metal
IRL, this was unbelieveable for me! Yay!&lt;/p&gt;
&lt;h2 id=&quot;wi-fi&quot;&gt;Wi-Fi&lt;/h2&gt;
&lt;p&gt;As I was vibing with my new Fedora installation, curiously checking out the
built-in apps, browsing the internet on Firefox. Ah yes, the point where it all
was meant to break. The builtin driver started its usual shenanigans and I was
no longer able to even ping a domain.&lt;/p&gt;
&lt;h3 id=&quot;installing-a-custom-driver&quot;&gt;Installing a custom driver&lt;/h3&gt;
&lt;p&gt;I had came across lwfinger&#39;s excellent
&lt;a href=&quot;https://github.com/lwfinger/rtw88&quot;&gt;Wi-Fi driver&lt;/a&gt; meant for rtw88 Realtek
network cards. Technically my network card also falls under rtw88, so I decided
to try this one, maybe it will fix the issues I was having. So I followed the
steps for Secure Boot systems given in the README and then rebooted. I confirmed
the driver was active but alas, the problems persisted. I then decided to
uninstall this driver, and this is where I messed up. I&#39;m not sure where it went
wrong, but now I couldn&#39;t figure out what to do.&lt;/p&gt;
&lt;h3 id=&quot;installing-the-other-custom-driver&quot;&gt;Installing the other custom driver&lt;/h3&gt;
&lt;p&gt;Since I had not upgraded the kernel, this was the perfect chance to fix this.
After upgrading the kernel, I then installed
&lt;a href=&quot;https://github.com/tomaspinho/rtl8821ce&quot;&gt;Tomás Pinho&#39;s driver&lt;/a&gt;
which is
specifically made for Realtek RTL8821CE network card. Following the instructions
given in the README, I was able to install this driver. Minor differences in the
process installation were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Installing &lt;code&gt;kernel-devel&lt;/code&gt; along with &lt;code&gt;kernel-headers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Following the &lt;a href=&quot;https://github.com/tomaspinho/rtl8821ce/issues/280&quot;&gt;GitHub issue instructing how to sign the module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I shut down the laptop, came back after some time, and booted it, hoping this
one will solve the issue. And it did! Wi-Fi back to normal, I could now browse
the Internet, run updates, do stuff. Life back to normal.&lt;/p&gt;
&lt;h2 id=&quot;more-things-i-did-to-make-stuff-work&quot;&gt;More things I did to make stuff work&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;I intend this section to be a &quot;living section&quot;; keeping track of things I
did to make stuff work. This might eventually get moved to a seperate, living
document.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Firefox was not playing videos. From the solutions mentioned on
&lt;a href=&quot;https://unix.stackexchange.com/q/690359&quot;&gt;this page&lt;/a&gt;, installing &lt;code&gt;ffmpeg&lt;/code&gt;
did the trick.&lt;/li&gt;
&lt;li&gt;Bring back the
&lt;a href=&quot;https://extensions.gnome.org/extension/615/appindicator-support/&quot;&gt;system tray&lt;/a&gt;
in the top bar.&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;snd-hda-intel&lt;/code&gt;&#39;s model to
&lt;a href=&quot;https://www.kernel.org/doc/html/latest/sound/hd-audio/models.html&quot;&gt;&lt;code&gt;headset-mic&lt;/code&gt;&lt;/a&gt;
via modprobe to make headset mic working again.&lt;/li&gt;
&lt;li&gt;For some reason OBS outputs poor recordings when using the &lt;code&gt;FFMPEG VAAPI&lt;/code&gt;
encoder, so to make it print better, albeit more huge recordings, use CQP
for &quot;Rate Control&quot; with QP=30 (works fine enough for my use case).&lt;/li&gt;
&lt;li&gt;Because I have installed a custom Wi-Fi driver, some non-fatal error messages
are expected, but ABRT decided to let me know every single time about it. Due
to this, there are 520 error reports in ABRT at the time. Reading the manpage
of &lt;a href=&quot;https://www.mankier.com/5/abrt-oops.conf&quot;&gt;&lt;code&gt;abrt-oops.conf&lt;/code&gt;&lt;/a&gt;, setting the
option &lt;code&gt;OnlyFatalMCE&lt;/code&gt; to &lt;code&gt;yes&lt;/code&gt; does the trick.&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>Making a container image for my school python project</title><link href="/posts/making-container-image-for-school-project/"/><updated>2022-03-23T00:00:00Z</updated><id>/posts/making-container-image-for-school-project/</id><content type="html">&lt;h2 id=&quot;what-is-this&quot;&gt;What is this?&lt;/h2&gt;
&lt;p&gt;This is a simple documentation/journal/story of me trying to create a container
image for my school python project using &lt;code&gt;podman&lt;/code&gt;/&lt;code&gt;buildah&lt;/code&gt; for the first time.&lt;/p&gt;
&lt;p&gt;I used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;podman&lt;/code&gt;: The pick for me because Docker has too many features that I don&#39;t
use.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buildah&lt;/code&gt;: Used for making the container image.&lt;/li&gt;
&lt;li&gt;All scripts written in &lt;a href=&quot;https://fishshell.com&quot;&gt;&lt;code&gt;fish&lt;/code&gt;&lt;/a&gt; unless specified.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;first-steps&quot;&gt;First steps&lt;/h2&gt;
&lt;p&gt;I&#39;ve had experience with Docker but I found &lt;code&gt;podman&lt;/code&gt; and &lt;code&gt;buildah&lt;/code&gt; to be more of
the tool I&#39;d like to use. Especially &lt;code&gt;buildah&lt;/code&gt;; the fact that I can make shell
scripts to build container images really made it look attractive to me.
So the first step definitely was to dig into using both the tools.&lt;/p&gt;
&lt;h3 id=&quot;choosing-a-base-image&quot;&gt;Choosing a base image&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;[Spoiler - Bad Idea]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For me, the go-to image for containers is the Alpine Linux image (due to its
small size), but never did I knew that I will be swapping it out because the
whole thing wouldn&#39;t even work at all!&lt;/p&gt;
&lt;h2 id=&quot;making-the-binary-work-in-the-container&quot;&gt;Making the binary work in the container&lt;/h2&gt;
&lt;p&gt;So the first steps were to try out my application binary (made using
&lt;code&gt;pyinstaller&lt;/code&gt;) in the image. So the commands to make it were:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;set id (buildah from --pull alpine)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;buildah copy &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; ./dist/cli /&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;buildah run &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; -- sh&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that I am jumping into the container&#39;s shell because I didn&#39;t want
to commit an image right now. Tried to run the binary, only to get&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;sh: ./dist/cli: not found&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I was initially confused by this error message, but later got to know that this
is a
&lt;a href=&quot;https://stackoverflow.com/a/66974607&quot;&gt;common symptom of a dynamic link failure&lt;/a&gt;
, which is entirely right, because Alpine Linux uses &lt;code&gt;musl-libc&lt;/code&gt;, and not
&lt;code&gt;glibc&lt;/code&gt;, so definitely the glibc libraries will be missing there. After a bit of
searching, I found a
&lt;a href=&quot;https://wiki.alpinelinux.org/wiki/Running_glibc_programs&quot;&gt;way to run glibc programs on Alpine linux&lt;/a&gt;
. So tried that, and...&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;/ # ./cli --help&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;Error relocating /tmp/_MEIAdPkMp/libz.so.1: crc32_z: symbol not found&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, definitely I was clueless about what to do. So I really had two options:
switch to another image, or not containerise. Fortunately, I picked the
first one - choose a different image.&lt;/p&gt;
&lt;h3 id=&quot;choosing-another-image&quot;&gt;Choosing another image&lt;/h3&gt;
&lt;p&gt;Since the app was working well enough in my Ubuntu 20.04 LTS distro
(WSL by the way), I decided to go for it. Checked the
&lt;a href=&quot;https://hub.docker.com/_/ubuntu?tab=tags&amp;#x26;page=1&amp;#x26;name=20.04&quot;&gt;20.04 tag&lt;/a&gt; on the
&lt;code&gt;ubuntu&lt;/code&gt; image. ~76 MB uncompressed disk size, not bad. So I pulled the image,
slapped the binary in, and tried &lt;code&gt;./cli --help&lt;/code&gt;, it worked! So I was ready to
do the next.&lt;/p&gt;
&lt;h2 id=&quot;making-the-pdf-generation-work-in-the-container&quot;&gt;Making the PDF generation work in the container&lt;/h2&gt;
&lt;p&gt;My application uses &lt;a href=&quot;https://playwright.dev/python&quot;&gt;Playwright&lt;/a&gt; to generate the
report card PDFs, based on a Jinja template filled with data which can be
sourced from different places. So if you go to the website of Playwright, throw
in a few clicks by navigating through the website, you will land here - the page
that tells how to
&lt;a href=&quot;https://playwright.dev/python/docs/cli#install-system-dependencies&quot;&gt;install system dependencies&lt;/a&gt;. So I pulled on a temporary Ubuntu container
and tried to install python3 and pip, but...&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;root@35423fdec4a9:/# apt install -y python3 python3-pip&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;Need to get 72.5 MB of archives.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;After this operation, 319 MB of additional disk space will be used.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;319 MB? Just to install the system dependencies? I was shocked. I decided to
leave this here and instead take a look in the source code of the Playwright CLI
, to figure out how it figures out system dependencies. So after quite a bit of
searching, I landed at this
&lt;a href=&quot;https://github.com/microsoft/playwright/blob/eaf2507ec1322401e5fb05c976a0d2a4d1c438f9/packages/playwright-core/src/utils/nativeDeps.ts&quot;&gt;nativeDeps.ts file&lt;/a&gt;,
which has a list of dependencies required for Playwright to function. Immediately realising this is an TypeScript file, an idea came to my mind. What if we just get the dependencies every time from this file when we start building out image?&lt;/p&gt;
&lt;h3 id=&quot;installing-dependencies-the-diy-way&quot;&gt;Installing dependencies, the DIY way&lt;/h3&gt;
&lt;p&gt;If we run playwright without the dependencies installed, we will get something
like this:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;╔════════════════════════════════════════════════════════════╗&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;║ Host system is missing a few dependencies to run browsers. ║&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;║ Please install them with the following command:            ║&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;║                                                            ║&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;║     playwright install-deps                                ║&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;║                                                            ║&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;║ &amp;#x3C;3 Playwright Team                                         ║&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;╚════════════════════════════════════════════════════════════╝&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So I hacked up a little Deno script to fetch the dependencies:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;deno eval &quot;import {deps} from &#39;https://raw.githubusercontent.com/microsoft/playwright/main/packages/playwright-core/src/utils/nativeDeps.ts&#39;; console.log(deps[&#39;ubuntu20.04&#39;][&#39;chromium&#39;].join(&#39;\n&#39;));&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;small&gt;Cheeky enough, I know 😉. By the way, Deno is used because the source is
a TypeScript file, and I wouldn&#39;t like to install several dozen packages on Node
just to get the dependencies list.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;And tried installing that in the container but apt decided to greet me with an
error message:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;E: Unable to locate package &amp;#x3C;all-the-package-names-seperated-by-a-space&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Realising how naïve this was, I tried to look up for solutions to this. One
&lt;a href=&quot;https://unix.stackexchange.com/a/212214&quot;&gt;solution that particularly stood out&lt;/a&gt;
was somewhat like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Store the list of dependencies in a file, one item on a line.&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;xargs&lt;/code&gt; to pass the arguments to apt
So I came up with these lines to do it:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;# Install dependencies&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;deno eval &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;import {deps} from &#39;https://raw.githubusercontent.com/microsoft/playwright/main/packages/playwright-core/src/utils/nativeDeps.ts&#39;; console.log(deps[&#39;ubuntu20.04&#39;][&#39;chromium&#39;].join(&#39;\n&#39;));&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; /tmp/deps.txt&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;buildah copy &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; /tmp/deps.txt /tmp&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;buildah run &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; -- xargs -a /tmp/deps.txt apt install -y&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which gets those packages installed, claiming ~117 MB of space in the process
(not to shabby, at least better than the previous 319 MB).&lt;/p&gt;
&lt;h3 id=&quot;the-tzdata-prompt-problem&quot;&gt;The tzdata prompt problem&lt;/h3&gt;
&lt;p&gt;While doing the installation, I noticed a prompt popping up:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;Configuring tzdata&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;------------------&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;Please select the geographic area in which you live. Subsequent configuration&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;questions will narrow this down by presenting a list of cities, representing&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;the time zones in which they are located.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;1. Africa 4. Australia 7. Atlantic 10. Pacific 13. Etc&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;2. America 5. Arctic 8. Europe 11. SystemV&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;3. Antarctica 6. Asia 9. Indian 12. US&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;Geographic area:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This was really a disappointment since building container image is supposed to
be an automated process. &lt;a href=&quot;https://serverfault.com/a/992421&quot;&gt;Looking up a
solution&lt;/a&gt; for this on the Web, I found out
that if I set the &lt;code&gt;DEBIAN_FRONTEND&lt;/code&gt; environment variable to &lt;code&gt;noninteractive&lt;/code&gt;, I
can stop the prompt from appearing. But I still need a time zone somehow! There
was another solution for it:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;buildah config --env TZ=Asia/Kolkata $id&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;buildah run $id -- ln -snf /usr/share/zoneinfo/\$TZ /etc/localtime&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;small&gt;Notice the $TZ. The $ was to prevent the TZ env from the host to creep
in&lt;/small&gt; Running this, gets the job done. No more tzdata prompt in the middle
of an installation, yay!&lt;/p&gt;
&lt;h2 id=&quot;setting-up-the-image-s-public-interface&quot;&gt;Setting up the image&#39;s public interface&lt;/h2&gt;
&lt;p&gt;The first step was to change the working directory, since the app is being
copied to &lt;code&gt;/app&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;buildah config --entrypoint &#39;[&quot;/app/cli&quot;]&#39; $id&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After this, I commit the image and then remove the working container:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;buildah commit $id rep&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;buildah rm $id&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;building-the-image&quot;&gt;Building the image&lt;/h2&gt;
&lt;p&gt;After this, I thought the thing was done. So I start the process of building the
image and leave the machine alone for some time. After the build was done, I
tried to run the image just to see that everything is working.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;podman run -it --rm localhost/rep&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And I see a very, very peculiar error:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;Usage: cli [OPTIONS] COMMAND [ARGS]...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;Try &#39;cli --help&#39; for help.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;Error: No such command &#39;bash&#39;.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But I didn&#39;t pass bash as a parameter! However, digging in the logs, I see a
line:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;WARN[0000] cmd &quot;bash&quot; exists and will be passed to entrypoint as a parameter&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some more &quot;looking up&quot; and I get to know that I have not set the &lt;code&gt;cmd&lt;/code&gt; key in
the image config&lt;sup&gt;&lt;a href=&quot;#user-content-fn-1&quot; id=&quot;user-content-fnref-1&quot; data-footnote-ref=&quot;&quot; aria-describedby=&quot;footnote-label&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. So I had two attempts to fix it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;buildah config --cmd &quot;&quot; $id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buildah config --cmd &#39;[&quot;&quot;]&#39; $id&lt;/code&gt; But they didn&#39;t work. I, getting bonkers
about not getting a solution, ran &lt;code&gt;buildah config --cmd &#39;[]&#39; $id&lt;/code&gt; and it
worked! There was no &quot;bash&quot; being passed as a parameter!&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;running-the-image&quot;&gt;Running the image&lt;/h3&gt;
&lt;p&gt;For this one, I use this command to run it:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;podman run -it --rm -v $PWD/config:/app/config -v $PWD/out:/app/out localhost/rep&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And it worked flawlessly. I was happy.&lt;/p&gt;
&lt;h3 id=&quot;size-of-the-image&quot;&gt;Size of the image&lt;/h3&gt;
&lt;p&gt;I also took a look at the image size just to see if our efforts have made any
significant effect. So running &lt;code&gt;podman image ls&lt;/code&gt; gives:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;REPOSITORY                 TAG         IMAGE ID      CREATED            SIZE&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;localhost/rep              latest      4c129f4360a0  About an hour ago  494 MB&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;494 MB. Still OK. &lt;del&gt;Could have easily been in the range of 1GB if I would
install Python to install the dependencies.&lt;/del&gt; I did that too, here are some
rough figures:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With Python and pip: 1.1 GB&lt;/li&gt;
&lt;li&gt;With Python and pip, but deleted them afterwards plus ran &lt;code&gt;apt autoremove&lt;/code&gt;:
~580 MB&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;getting-attracted-to-alpine-again&quot;&gt;Getting attracted to Alpine, again&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;SPOILER: BAD IDEA AGAIN! :(&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As I am writing this post, another idea pops up: what if, we bundle the app into
an AppImage bundle, and pop it inside an Alpine container? After all, AppImage
bundles, if done correctly, can run anywhere, even in the scratch container.
Also we could save more storage space. The Ubuntu image still has lots of things
that are of no use to my app and we could, in theory, cut on a lot of bloat. The
general process could be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Figure out the shared libraries of the app and the Playwright-supplied
Chromium binary.&lt;/li&gt;
&lt;li&gt;Create an AppImage.&lt;/li&gt;
&lt;li&gt;Pop it in the &lt;code&gt;scratch&lt;/code&gt;/&lt;code&gt;alpine&lt;/code&gt; image &lt;del&gt;Could be a very nice plan to do, but
not now, its for another day!&lt;/del&gt; Figured out the shared libraries using &lt;code&gt;ldd&lt;/code&gt;,
I made an AppImage, tried to run it on my host machine, but it failed to
generate the PDFs. Maybe the Chromium binary was missing a library or two,
who knows. Later I found a Docker image for &lt;a href=&quot;https://hub.docker.com/r/zenika/alpine-chrome&quot;&gt;running Chrome in
Alpine&lt;/a&gt; and thought of trying
it out. But first, I checked the image size, it was 282.18 MB compressed. If
I consider the compression ratio to be about as half, that, plus, my binary,
the total storage space would be well over the current image size. Not worth
the effort.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;ending-words&quot;&gt;Ending Words&lt;/h2&gt;
&lt;p&gt;This was really my first time making an image, and it was a fun adventure, span
over the course of a week.&lt;/p&gt;
&lt;p&gt;If you are interested about this project,
&lt;a href=&quot;https://github.com/retronav/rep&quot;&gt;check it out here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, here&#39;s a
&lt;a href=&quot;https://github.com/retronav/rep/blob/main/scripts/build-image.fish&quot;&gt;direct link&lt;/a&gt;
to the script that makes the container image.&lt;/p&gt;
&lt;section data-footnotes=&quot;&quot; class=&quot;footnotes&quot;&gt;&lt;h3 id=&quot;footnote-label&quot; class=&quot;sr-only&quot;&gt;Footnotes&lt;/h3&gt;
&lt;ol&gt;
&lt;li id=&quot;user-content-fn-1&quot;&gt;
&lt;p&gt;( &lt;a href=&quot;https://www.mankier.com/1/buildah-config#--cmd&quot;&gt;https://www.mankier.com/1/buildah-config#--cmd&lt;/a&gt; ) Always read your man
pages when in doubt. It helps. If it doesn&#39;t, then you might need to look up
elsewhere. &lt;a href=&quot;#user-content-fnref-1&quot; data-footnote-backref=&quot;&quot; class=&quot;data-footnote-backref&quot; aria-label=&quot;Back to content&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</content></entry><entry><title>I&#39;m moving my blog to Eleventy</title><link href="/posts/moving-to-eleventy/"/><updated>2022-03-17T00:00:00Z</updated><id>/posts/moving-to-eleventy/</id><content type="html">&lt;p&gt;You read the title. I&#39;ve migrated my site over to &lt;a href=&quot;https://11ty.dev&quot;&gt;Eleventy&lt;/a&gt;,
from &lt;a href=&quot;https://astro.build&quot;&gt;Astro&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;backstory&quot;&gt;Backstory&lt;/h2&gt;
&lt;p&gt;First of all, I always wanted to love &lt;a href=&quot;https://11ty.dev&quot;&gt;Eleventy (or 11ty)&lt;/a&gt;.
When I discovered it (in 2020), it was love at first sight, and I wanted to
build my site with it. But that time the project was probably in the beta stage,
which reflected by its 0.x version number. Docs were not arranged good enough
for me, some things required deep understanding of Eleventy. I felt it&#39;s
probably not for me at that stage, and then moved on. Then comes
&lt;a href=&quot;https://gohugo.io&quot;&gt;Hugo&lt;/a&gt;. I built my site using Hugo. It was fast, like,
&lt;em&gt;exceptionally fast&lt;/em&gt;. There were lots of themes/templates to choose from, and I
got my site up within a week. But there was a problem. Hugo basically had very
little opportunities for extensibility. Being written Go, which is a compiled
language, there was no concept of &quot;plugins&quot; for it. Everything had to be done
using scripting. I remember spending an afternoon to write a script to highlight
code blocks using &lt;a href=&quot;https://github.com/shikijs/shiki&quot;&gt;Shiki&lt;/a&gt;. In retrospect, it
did get the job done, but it was still problematic. If I had went on, it&#39;d been
a &quot;script hell&quot; around Hugo to build my site.&lt;/p&gt;
&lt;h2 id=&quot;astro&quot;&gt;Astro&lt;/h2&gt;
&lt;p&gt;Then comes Astro, which I got to know about in May of 2021. It was a very young
project, but with a clear vision - to create static sites with on-demand
JavaScript. I quickly got in contact with the awesome people making it, and had
some good time. I decided to re-build my website in Astro. It was a bold move, I
know, making important stuff with beta software is never a good idea. The docs
were written very well, and most of the times the answer was in the docs. And
the people there in the Discord server were always ready to answer my (sometimes
silly) questions. During the process of writing my site in Astro, I had
struggled quite a lot due to bugs, in that process I think I was of much use to
the Astro community because I was helping other people with issues I faced
earlier, reporting bugs on Discord, and sending a couple of pull requests on
GitHub. I also implemented &lt;a href=&quot;https://github.com/withastro/astro/releases/tag/astro%400.22.15&quot;&gt;the draft posts
feature&lt;/a&gt;(the
&lt;code&gt;@obnoxiousnerd&lt;/code&gt;&#39;s me btw), of which I feel very proud of myself. Astro&#39;s team
also had decided to rewrite their compiler in Go, which they were successful
with. With that I remember finding my website completely broken and then
spending more time fixing it. It was good, the grind was good. They also
selected me for their
&lt;a href=&quot;https://opencollective.com/astrodotbuild/expenses/63326&quot;&gt;Community Recognition Award, January 2022&lt;/a&gt;,
which counts as
my first earning from contributing to open source, of which I am very grateful
of. But, there&#39;s a few things which were not fitting quite well with my site
with Astro, which boils down to a few personal preferences and the beta nature
of Astro, as I&#39;m writing this.&lt;/p&gt;
&lt;h3 id=&quot;the-reasons-behind-the-change&quot;&gt;The reasons behind the change&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Beta software. Now no one here is to be blamed for this, it&#39;s always good to
be a kind of early adopter for new software. Astro, I think, is doing things
the right way, or to be more precise, the way they should be. Astro,
&lt;a href=&quot;http://slinkity.dev/&quot;&gt;Slinkity&lt;/a&gt;, &lt;a href=&quot;https://remix.run&quot;&gt;Remix&lt;/a&gt; are some of the
newer tools which are doing the web things the right way, ship HTML, with JS
stepping down as the second-in-line. Doing things the right way takes time,
and I know it very well. The new compiler in Go unfortunately has some
bizarre bug which would throw random errors even on files with the correct
syntax. It was a pain to get things fixed with that.&lt;/li&gt;
&lt;li&gt;Personal preferences. Astro, like Hugo or Eleventy, does not have
shortcodes&lt;sup&gt;&lt;a href=&quot;#user-content-fn-1&quot; id=&quot;user-content-fnref-1&quot; data-footnote-ref=&quot;&quot; aria-describedby=&quot;footnote-label&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; as of now (there will be, I know it, probably I&#39;ll implement it
if I get the chance), which I absolutely like to use. I was not very pleased
with writing JSX-esque components in my Markdown. Also my way of writing and
structuring my personal website didn&#39;t align with the structure of a typical
Astro project. My code was getting clunky, and it was time to switch.
Nunjucks? Boy did I missed it a lot.&lt;/li&gt;
&lt;li&gt;I like the idea of Webmentions, but I was totally not sure how to implement
it with Astro. Maybe if someone knows it, they must create a guide for it.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;back-to-eleventy&quot;&gt;Back to Eleventy&lt;/h2&gt;
&lt;p&gt;I was checking on Eleventy after quite a few months now, and looks like they&#39;ve
released their first stable version! Looking at this, I check out their docs,
this time its well structured and in place, and I just couldn&#39;t resist myself
switching to it. Templates, Data files, all that felt like the perfect hole my
plugs were not filing. The structure of my site under Hugo with endless
extensibility, just what I needed. And so here we are, now.&lt;/p&gt;
&lt;p&gt;With Astro, my website was still sturctured very good and was very modular, and
that helped me migrate to Eleventy in just two days. Astro&#39;s very good, give it
a try!&lt;/p&gt;
&lt;h2 id=&quot;the-future&quot;&gt;The future&lt;/h2&gt;
&lt;p&gt;So as it stands, I am sticking with Eleventy for now, regarding my website. But
that doesn&#39;t mean it&#39;s all over for me and Astro. Astro, and its community will
always have a special place in my heart, and I will continue working with Astro
with some of my projects (There is already one in the works, and the folks on
Astro&#39;s Discord server know about it 😉). Migrating from Astro does give me a
sense of me betraying Astro, but I hope I&#39;ll feel better after rambling about
this. And, I will be writing my Projects page in Astro, because I want some
dynamic things in it without sacrificing static HTML! There you go, yet another
case of extensibility.&lt;/p&gt;
&lt;section data-footnotes=&quot;&quot; class=&quot;footnotes&quot;&gt;&lt;h3 id=&quot;footnote-label&quot; class=&quot;sr-only&quot;&gt;Footnotes&lt;/h3&gt;
&lt;ol&gt;
&lt;li id=&quot;user-content-fn-1&quot;&gt;
&lt;p&gt;In Astro, shortcodes basically means using a component written in a
framework or Astro&#39;s own templating language. I&#39;ll implement them if its in
the plans and if I get it done correctly. &lt;a href=&quot;#user-content-fnref-1&quot; data-footnote-backref=&quot;&quot; class=&quot;data-footnote-backref&quot; aria-label=&quot;Back to content&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</content></entry><entry><title>Assigning equal amount of tasks among people</title><link href="/posts/assigning-equal-amount-of-tasks-among-people/"/><updated>2022-02-26T00:00:00Z</updated><id>/posts/assigning-equal-amount-of-tasks-among-people/</id><content type="html">&lt;h2 id=&quot;context&quot;&gt;Context&lt;/h2&gt;
&lt;p&gt;So I had this edge-case scenario where I was to assign tasks among the four of
us for a video project. We had initially decided to take the tasks numerically,
but then I thought, &quot;let&#39;s make this randomized&quot;. The tasks were equally
dividable, and my team members gave in, ergo I created this little script to do
the work.&lt;/p&gt;
&lt;h2 id=&quot;finding-the-right-thing-to-do-the-job&quot;&gt;Finding the right thing to do the job&lt;/h2&gt;
&lt;p&gt;Obviously, TypeScript is the first option to do this, but the interface for
random numbers isn&#39;t the most pleasing one for this situation. There&#39;s also
shell scripts (&lt;code&gt;fish&lt;/code&gt; is my pick), but I never dealt with random numbers in the
command line. So then its Python which will be used to do the job.&lt;/p&gt;
&lt;h3 id=&quot;random-shuffle&quot;&gt;&lt;code&gt;random.shuffle()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Checking &lt;a href=&quot;https://stackoverflow.com/a/473983&quot;&gt;this question on StackOverflow&lt;/a&gt;,
there was a function in the &lt;code&gt;random&lt;/code&gt; module of Python to shuffle the lists &lt;em&gt;in
place&lt;/em&gt;. Phew. I thought I was going to write a bunch of more stuff for shuffling
the lists and stuff 😅&lt;/p&gt;
&lt;p&gt;So the plan was clear, use this function and build code around it and get the
job done.&lt;/p&gt;
&lt;h2 id=&quot;the-script&quot;&gt;The script&lt;/h2&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; random&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;# Obviously these are not the real names and tasks.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;people &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;Jack&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;Jamie&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;tasks &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;[&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;Going for the messages&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;Water the plants&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;Check the mailbox&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;Wash the clothes&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;Clean the plates&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;Cook lunch&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;task_per_person &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FE8019&quot;&gt;len&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #D5C4A1&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FE8019&quot;&gt;len&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #D5C4A1&quot;&gt;people&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;# This shouldn&#39;t continue if the tasks cannot be divided equally. If this&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;# is the case, then one has to remove some number of tasks to make the&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;# number correct, or else make a custom solution.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; task_per_person &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #D3869B&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;!=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #D3869B&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;raise&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;Exception&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;Tasks cannot be equally divided&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;c &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #D3869B&quot;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; i &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FE8019&quot;&gt;range&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #D5C4A1&quot;&gt;task_per_person&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)):&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;# Shuffling the tasks list is totally optional&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;	random&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;shuffle&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #D5C4A1&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;	shuffled &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; people&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;	random&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;shuffle&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #D5C4A1&quot;&gt;shuffled&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; person &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; shuffled&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;		&lt;/span&gt;&lt;span style=&quot;color: #FE8019&quot;&gt;print&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;f&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #D3869B&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #D5C4A1&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #D5C4A1&quot;&gt;c&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #D3869B&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt; : &lt;/span&gt;&lt;span style=&quot;color: #D3869B&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #D5C4A1&quot;&gt;person&lt;/span&gt;&lt;span style=&quot;color: #D3869B&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;		c &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;+=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #D3869B&quot;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;on-what-would-it-won-t-work&quot;&gt;On what would it won&#39;t work?&lt;/h3&gt;
&lt;p&gt;This won&#39;t work when the tasks are not equally assignable. For instance. 8 tasks
among 4 people is possible, but 7 tasks among 3 isn&#39;t. I&#39;ll probably write code
for this too in the future.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;small&gt;The names in the snippet are a reference to an Ed Sheeran&#39;s song. Check
if you can find out ;)&lt;/small&gt;&lt;/p&gt;</content></entry><entry><title>Upgrading your Ubuntu LTS distro in WSL</title><link href="/posts/upgrading-ubuntu-lts-wsl/"/><updated>2022-01-20T00:00:00Z</updated><id>/posts/upgrading-ubuntu-lts-wsl/</id><content type="html">&lt;blockquote&gt;
&lt;p&gt;Note: This post was written after upgrading my Ubuntu 20.04 LTS, so I don&#39;t
have any relevant screenshots/logs at the moment. Things are subject to change
in the future.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I was configuring my git settings when I realised that git&#39;s version was an
older one (2.25). So I tried to update, but it didn&#39;t do that and instead told
that it&#39;s already up-to-date. It didn&#39;t took long to realise that the newer
versions are on the repositories of the newer versions and so I need to upgrade
my WSL distro. Here are the steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;sudo do-release-upgrade&lt;/code&gt;
At this stage you will probably see some error
telling you that it couldn&#39;t find any release, that is because it is looking
for LTS releases but there isn&#39;t any (as of writing this), so you need to
change some configuration files.
&lt;ul&gt;
&lt;li&gt;Open the &lt;code&gt;/etc/update-manager/release-upgrades&lt;/code&gt;, and set the &lt;code&gt;Prompt&lt;/code&gt; from
&lt;code&gt;lts&lt;/code&gt; to &lt;code&gt;normal&lt;/code&gt; (only do this if you are OK with a non-LTS version). Now
you can run the original command again.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It will start pulling the repositories of the newest upgradable release. If
you notice that the installer is hanging and then terminating, that is
because of it trying to start &lt;code&gt;snap&lt;/code&gt;. So, for the upgrade to proceed, you
need to remove &lt;code&gt;snap&lt;/code&gt;. Don&#39;t worry, if you need it, you can install it back
after the upgrade (&lt;a href=&quot;https://discourse.ubuntu.com/t/using-snapd-in-wsl2/12113&quot;&gt;why is snap even in WSL when it doesn&#39;t work by default?
¯\_(ツ)_/¯&lt;/a&gt;).
Remove the &lt;code&gt;snap&lt;/code&gt; and &lt;code&gt;snapd&lt;/code&gt; packages, you&#39;d be good to go.&lt;/li&gt;
&lt;li&gt;Now follow the prompts. At one point it will ask for permission to restart
all services. Grant the permission and let it continue.&lt;/li&gt;
&lt;li&gt;BOOM! You have upgraded to a newer version! Hope you enjoy your distro with a
breath of fresh air.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;I could find this on &lt;a href=&quot;https://www.hughrawlinson.me/posts/2021/06/04/solved-do-release-upgrade-hangs-in-ubuntu-on-wsl&quot;&gt;another post&lt;/a&gt; by Hugh Rawlinson, however their Ubuntu&#39;s version was 18.04 LTS, but the steps are pretty much the same.&lt;/p&gt;</content></entry><entry><title>One Liner for rimraf that gets the job done</title><link href="/posts/one-liner-for-rimraf-that-gets-the-job-done/"/><updated>2021-07-10T00:00:00Z</updated><id>/posts/one-liner-for-rimraf-that-gets-the-job-done/</id><content type="html">&lt;p&gt;I have been striving to cut down on node_modules. Most of the times, I need
rimraf to delete a folder (usually &lt;code&gt;public&lt;/code&gt;/&lt;code&gt;dist&lt;/code&gt;/&lt;code&gt;build&lt;/code&gt;) and to keep the
project cross platform. So, here is a one-liner to delete a folder/file:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;node -e &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;require(&#39;fs&#39;).rmSync(&#39;PATH&#39;,{recursive:true,force:true})&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: Replace &lt;code&gt;PATH&lt;/code&gt; by the path to the folder/file. This works the same as &lt;code&gt;rm -rf&lt;/code&gt; command, but cross-platform.&lt;/p&gt;</content></entry><entry><title>Angularfire V7 Auth Guard</title><link href="/posts/angularfire-v7-auth-guard/"/><updated>2021-06-08T00:00:00Z</updated><id>/posts/angularfire-v7-auth-guard/</id><content type="html">&lt;p&gt;As of now, the AngularFire v7(&lt;strong&gt;&quot;Beta&quot;&lt;/strong&gt;) does not have an implementation for an
auth guard(which I really need), so I went ahead, copied the original auth guard
code (from v6), and refactored it to make it compatible with v7.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This code works on Angular 12. I haven&#39;t tested it for older versions, but it should work.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here&#39;s the code:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;Injectable&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;@angular/core&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;Auth&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;@angular/fire&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;authState&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;@angular/fire/auth&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;ActivatedRouteSnapshot&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;CanActivate&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;Router&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;RouterStateSnapshot&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;UrlTree&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;@angular/router&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;User&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;@firebase/auth&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;Observable&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;of&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;pipe&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;UnaryFunction&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;rxjs&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;switchMap&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;take&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;rxjs/operators&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;AuthPipeGenerator&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;next&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; ActivatedRouteSnapshot&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; RouterStateSnapshot&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;AuthPipe&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;AuthPipe&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;UnaryFunction&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&amp;#x3C;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;Observable&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&amp;#x3C;&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;User&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;Observable&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&amp;#x3C;&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;boolean&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;any&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;[]&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;loggedIn&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; AuthPipe &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;!!&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt; * Auth guard based on AngularFire v6 AngularFireAuthGuard.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt; * Check out the v6 implementation here: https://git.io/JZOcy&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt; */&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;@&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;Injectable&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  providedIn&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;root&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;AuthGuard&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FE8019&quot;&gt;implements&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; CanActivate &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;constructor&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FE8019&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;auth&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; Auth&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FE8019&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;router&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; Router&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;canActivate&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;route&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; ActivatedRouteSnapshot&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; RouterStateSnapshot&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; Observable&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&amp;#x3C;&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;boolean &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; UrlTree&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; Promise&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;&amp;#x3C;&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;boolean&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;UrlTree&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;boolean&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;UrlTree&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;authPipeFactory&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;      (&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;route&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;data&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;authGuardPipe&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;as&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;AuthPipeGenerator&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;||&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;loggedIn&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;authState&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FE8019&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;auth&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;pipe&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;take&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #D3869B&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;authPipeFactory&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;route&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;can&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;typeof&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;can&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;===&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;boolean&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;can&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; (Array&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;isArray&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;can&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)) &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FE8019&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;router&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;createUrlTree&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;can&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FE8019&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;router&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;parseUrl&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;can&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    )&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;canActivate&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;pipe&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; AuthPipeGenerator&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  canActivate&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;AuthGuard&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  data&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; authGuardPipe&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;pipe&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;isNotAnonymous&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; AuthPipe &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;!!&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;&amp;#x26;&amp;#x26;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;!&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;isAnonymous&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;idTokenResult&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;switchMap&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; User &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; null&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;?&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;getIdTokenResult&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;() &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;of&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #D3869B&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;emailVerified&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; AuthPipe &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;!!&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;&amp;#x26;&amp;#x26;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;emailVerified&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;customClaims&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;pipe&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;idTokenResult&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;idTokenResult&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;idTokenResult&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;?&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;idTokenResult&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;claims&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; []))&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;hasCustomClaim&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;claim&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; string&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; AuthPipe &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;claim&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;pipe&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;customClaims&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;claims&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;claims&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;claim&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  )&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;redirectUnauthorizedTo&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;redirect&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; string &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; any[]&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; AuthPipe &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;redirect&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;pipe&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;loggedIn&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;loggedIn&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;loggedIn&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;||&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;redirect&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  )&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;redirectLoggedInTo&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;redirect&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; string &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; any[]&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt; AuthPipe &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;redirect&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;pipe&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;loggedIn&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;loggedIn&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;loggedIn&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;&amp;#x26;&amp;#x26;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;redirect&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;||&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #D3869B&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  )&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</content></entry><entry><title>How to Keep Your Firebase Project Safe and Secure from everyone</title><link href="/posts/how-to-keep-your-firebase-config-safe/"/><updated>2020-12-18T00:00:00Z</updated><id>/posts/how-to-keep-your-firebase-config-safe/</id><content type="html">&lt;p&gt;After doing a couple of open source Firebase projects (web apps, I mean), I feel
like I&#39;m experienced* enough to write this post. So if I say something wrong
here, kindly let me know here.&lt;/p&gt;
&lt;h2 id=&quot;why-is-this-necessary&quot;&gt;Why is this necessary?&lt;/h2&gt;
&lt;p&gt;I have a secret here(not really, just some people don&#39;t know about it). &lt;strong&gt;Your
Firebase config&lt;/strong&gt;, which you might have been wondering where to hide, &lt;strong&gt;is
publicly visible&lt;/strong&gt;(if you use Firebase hosting). Don&#39;t believe me? Go to the
index page any site which uses Firebase hosting, and just append
&quot;/__/firebase/init.js&quot; (eg. &lt;code&gt;someapp.web.app/__/firebase/init.js&lt;/code&gt;) and visit
it, and you&#39;ll remain surprised by the result. This is something which is not
discovered by me, its actually written in the
&lt;a href=&quot;https://firebase.google.com/docs/hosting/reserved-urls&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;protecting-your-project&quot;&gt;Protecting your project&lt;/h2&gt;
&lt;h3 id=&quot;firestore-datastore-and-firebase-storage&quot;&gt;Firestore datastore and Firebase Storage&lt;/h3&gt;
&lt;p&gt;This is perhaps the most important part of your backend which possibly contains
sensitive data, which must be protected and it might cause harm when in the
hands of bad people. So how to protect these? Well, here are some steps:&lt;/p&gt;
&lt;h4 id=&quot;start-in-production-mode&quot;&gt;&quot;Start in production mode&quot;&lt;/h4&gt;
&lt;p&gt;When setting up Firestore and storage, you might get asked whether to start the
resource in production mode or test mode. So always choose &quot;Production mode&quot; /
&quot;Locked mode&quot;. The reason is that this mode introduces some security rules that
will block access from every client. Don&#39;t fear though, we can still change
them.&lt;/p&gt;
&lt;h4 id=&quot;configure-security-rules&quot;&gt;Configure &lt;a href=&quot;https://firebase.google.com/docs/rules&quot;&gt;security rules&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Security rules are very great to have. Using these, you can decide who can have
access to data and who cannot. These are written in .rules files and have a
similar syntax to JavaScript which can be understood in the docs. Since we used
production mode, you will see this particular rule in your security rules:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;match /{document=**} {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;    allow read, write: if false;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;//Don&#39;t remove this rule, or else your project is gone&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;//and keep this rule at end (this comment is added by me)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which literally means that no client can access your database and storage, which
is sometimes not needed. So we can introduce changes in how we store data. If
you&#39;ve used Firebase, you know that for every user that signs up for your app,
they are assigned a unique ID (or UID). We can store resources based on their
UID, for example, in a todo app, one can store user&#39;s data in their database at
path &lt;code&gt;/todos/users-uid&lt;/code&gt; which makes sense. So in this, we can add a new rule:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;match /todos/{uid=\*\*} {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;allow read, write: if request.auth != null and request.auth.uid == uid;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ebdbb2&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that if anyone accesses any path under todos collection, they should
be authenticated to the app, and if they try to access a specific UID in the
collection, the database will only allow access if they access data under their
UID. Do the same for Firebase storage as well.&lt;/p&gt;
&lt;h4 id=&quot;use-seperate-api-keys-if-they-are-used-only-for-one-purpose&quot;&gt;Use seperate API keys if they are used only for one purpose&lt;/h4&gt;
&lt;p&gt;Suppose you are also developing a CLI for your app (&lt;a href=&quot;https://github.com/obnoxiousnerd/lookahead&quot;&gt;which I am
doing&lt;/a&gt;), you might need your API key
for refreshig the user&#39;s JWT (which I am doing :) ). So just don&#39;t use the same
Firebase config API key, create a new one which has only access to the things we
need, in this case, we need access to the Token Service API. So you can move to
the &lt;a href=&quot;https://console.developers.google.com/&quot;&gt;Google APIs dashboard&lt;/a&gt;, and then
select your preferred project.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When you&#39;re in the dashboard, go to the &#39;Credentials&#39; section.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/uocb2U3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then in the top app bar, click the &quot;Create Credentials&quot; button. A drop down
will appear. Select &quot;API key&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then it will show a dialog like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/os9Ptgt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then that key will appear in the &quot;Keys&quot; section. Then, in that list, find the
API key we just created, and then click on the pencil icon.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scroll down and you&#39;ll find a section &quot;API restrictions&quot;. Select the option
&quot;Restrict key&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then a dropdown will appear with text &quot;Select APIs&quot;. Then select the services
which you want the API key to be working with. I&#39;ll select the Token Service
API here.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/DOWZTMi.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Just hit the &quot;Save&quot; button.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then in the keys&#39; section, you&#39;ll find that the API key has a green check on it.
It means that it is now secure and you&#39;ll bear less damage if it got leaked.&lt;/p&gt;
&lt;h4 id=&quot;if-you-need-to-have-your-api-keys-in-your-repo&quot;&gt;If you need to have your API keys in your repo&lt;/h4&gt;
&lt;p&gt;If your code is public, and you need your API keys for testing or just to keep
everything modular and smooth, encrypt it and then save it. I also use a similar
approach in my CLI app, beacuse I need it for CI. You can use any encryption
method which uses public-private key pair and then store the encrypted file in
your repo and then decrypt it whenever needed.&lt;/p&gt;
&lt;h4 id=&quot;respect-firebase-server-credentials&quot;&gt;Respect Firebase server credentials&lt;/h4&gt;
&lt;p&gt;Now this is important. We&#39;ve been talking about the general Firebase config
which we add in our web apps, but now, I&#39;m talking about server credentials,
which are used by the Admin SDKs. These are allowed access everywhere; no one
can deny them. So treat them with respect and keep them as a secret only, don&#39;t
show them off or else you&#39;re done.&lt;/p&gt;
&lt;h2 id=&quot;ending-thoughts&quot;&gt;Ending thoughts&lt;/h2&gt;
&lt;p&gt;Good job if you&#39;ve made it this far. Now you can just chill back and write some
code for your project. Always tell me if you got stuck in any of the steps. Have
a nice day :)&lt;/p&gt;</content></entry><entry><title>Reactivity Anywhere Without Virtual Dom</title><link href="/posts/reactivity-anywhere-without-virtual-dom/"/><updated>2020-11-20T00:00:00Z</updated><id>/posts/reactivity-anywhere-without-virtual-dom/</id><content type="html">&lt;h2 id=&quot;how-did-this-got-into-my-mind&quot;&gt;How did this got into my mind??&lt;/h2&gt;
&lt;p&gt;Virtual DOM can be referenced as the thing which just &quot;introduced&quot; me to the
title of this post. What if we keep aside all that diffing, state stuff, and
focus on one thing: reactivity between the JavaScript and the DOM. Well, most of
us are using libraries just to achieve this reactivity in our apps. But most of
them implement a virtual DOM which keeps track of all the tags, states,
variables, objects, and whatnot and then syncs them with the real DOM. As said,
things might get a little crazy doing all this stuff. So I just decided, why not
just implement a crude example of all this &quot;virtual DOM&quot; thing without virtual
DOM. Is this even achievable?? The answer is (0.5 * yes)!! For the sake of this
post, let us call it &quot;Reactivity Anywhere.&quot;&lt;/p&gt;
&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;This post might have things that seem vague and senseless. Also don&#39;t take
things too seriously here, take them as just a thought. Reader discretion is
advised.&lt;/p&gt;
&lt;h2 id=&quot;let-s-start&quot;&gt;Let&#39;s Start!!&lt;/h2&gt;
&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A web browser&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;defining-the-global-variables-precisely-stores&quot;&gt;Defining the global variables(precisely, stores)&lt;/h2&gt;
&lt;p&gt;To keep track of what goes here and there, we need some global variables to
preserve and mutate all the states.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;__refs__&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{};&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;__reactives__&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; []&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;__reactiveEl__&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;document&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;[reactive]&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;reactive&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;obj&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;/*Add logic*/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;__updateDOM__&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;/*Add logic*/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is just everything we need for the logic. The variables whose names start
and end with double underscores are
&lt;a href=&quot;https://github.com/facebook/react/blob/3ebf05183dfcb8eadfc41a9e19559d835fd9b77e/packages/react/index.js#L71&quot;&gt;internals&lt;/a&gt;.
We will only store two things: references to the elements, and, of course, the
reactive variables.&lt;/p&gt;
&lt;h3 id=&quot;but-this-seems-like-virtual-dom&quot;&gt;But this seems like virtual DOM!!!&lt;/h3&gt;
&lt;p&gt;But I&#39;m sorry, this is not the virtual DOM you think:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We will not be diffing the whole element tree for every single change; only
and only the affected element will be mutated (less carbon dioxide)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;determining-reactive-elements&quot;&gt;Determining &lt;code&gt;reactive&lt;/code&gt; elements&lt;/h2&gt;
&lt;p&gt;To keep specificity and refrain from scanning the whole DOM, we will just
handpick special elements that work with our module. So, any element that has
the &lt;code&gt;reactive&lt;/code&gt; attribute (&lt;code&gt;&amp;#x3C;element reactive&gt;&amp;#x3C;/element&gt;&lt;/code&gt;), will only be able to
use the special reactive powers.&lt;/p&gt;
&lt;p&gt;To access the reactive elements from the store, we will use the ES6 string
interpolation syntax. So, to access the &lt;code&gt;count&lt;/code&gt;, we will write&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #83A598&quot;&gt;&amp;#x3C;&lt;/span&gt;&lt;span style=&quot;color: #8EC07C; font-weight: bold&quot;&gt;h1&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;reactive&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;The time is ${count}&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;&amp;#x3C;/&lt;/span&gt;&lt;span style=&quot;color: #8EC07C; font-weight: bold&quot;&gt;h1&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;the-refs&quot;&gt;The &lt;code&gt;__refs__&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Here, we will store the values of the object passed in the &lt;code&gt;reactive&lt;/code&gt; function.&lt;/p&gt;
&lt;h2 id=&quot;the-reactives&quot;&gt;The &lt;code&gt;__reactives__&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This is just an array containing live references of the DOM Elements.&lt;/p&gt;
&lt;h2 id=&quot;the-reactive&quot;&gt;The &lt;code&gt;reactive()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This function is basically a store where you&#39;d be storing all the reactive
stuff. The definition of the function is surprisingly simple:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;reactive&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;obj&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// Loop through the string&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  Object&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;keys&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;obj&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;key&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// defineProperty, anyone??&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// We want to maintain reactivity, so we are using custom&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// getters and setters&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    Object&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;defineProperty&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;__refs__&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;key&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;obj&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;key&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// This shows an interesting aspect of the logic.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// This will update the target element everytime&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// something changes.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;val&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;obj&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;key&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;] &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;val&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;__updateDOM__&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;key&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// Think of this as an initial render&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;__updateDOM__&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;key&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// This is an important step otherwise&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// everything is useless&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;__refs__&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;the-update-dom&quot;&gt;The &lt;code&gt;__updateDOM__()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This is the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Rosetta_(software)#:~:text=Rosetta%20is%20a%20dynamic%20binary%20translator%20developed,application%20compatibility%20layer%20between%20different%20CPU%20architectures&quot;&gt;Rosetta&lt;/a&gt;
for the &lt;code&gt;reactive&lt;/code&gt; DOM Elements and the &lt;code&gt;__refs__&lt;/code&gt;. This function is also
relative simple in its definition:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// Ref can be any key from the __refs__ store&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;__updateDOM__&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// This is to check whether we want to update a specific ref value&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;__reactives__&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// filter out the elements we need&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;filter&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;reactive&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;reactive&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;dataset&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;===&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;reactive&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;let&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;reactive&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;dataset&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// Interacting with the DOM&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// Nullish coalescing, anybody?&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;reactive&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;textContent&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;__refs__&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;] &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;??&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// UPDATE ALL!!&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;__reactives__&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;reactive&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;let&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;reactive&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;dataset&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// Interacting with the DOM&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// Nullish coalescing, anybody?&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;reactive&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;textContent&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;__refs__&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;] &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;??&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;finding-all-the-reactive-variables-and-bootstrapping-them&quot;&gt;Finding all the reactive variables and bootstrapping them&lt;/h2&gt;
&lt;p&gt;This can be wrapped as an IIFE (Immediately Invoked Function Expression) but I
don&#39;t consider doing it for the sake of simplicity. So, here we go!!&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// Get live elements&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;__reactiveEl__&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;document&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;[reactive]&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #83A598&quot;&gt;__reactiveEl__&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// Match the `count` between &amp;#x3C;h1 reactive&gt;${count}&amp;#x3C;/h1&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;refs&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;innerHTML&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;match&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #D3869B&quot;&gt;\$&lt;/span&gt;&lt;span style=&quot;color: #FE8019&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;([&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;^&lt;/span&gt;&lt;span style=&quot;color: #D3869B&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #FE8019&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;g&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// If the refs exist&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;refs&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;refs&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// extract it&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;dataRef&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;split&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)[&lt;/span&gt;&lt;span style=&quot;color: #D3869B&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;split&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)[&lt;/span&gt;&lt;span style=&quot;color: #D3869B&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;trim&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// insert a special span element with the element&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// and store the key name in the `data-ref` attribute&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;innerHTML&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;innerHTML&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;replace&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;`&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;&amp;#x3C;span class=&quot;reactivity-anywhere&quot; data-ref=&quot;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;dataRef&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;&quot;&gt;&amp;#x3C;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;      )&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// Push the span element in __reactives__&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;__reactives__&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;push&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;span.reactivity-anywhere&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;))&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// Initialize all the magic!!&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;__updateDOM__&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;making-input-and-textarea-work-with-reactives&quot;&gt;Making &lt;code&gt;&amp;#x3C;input&gt;&lt;/code&gt; and &lt;code&gt;&amp;#x3C;textarea&gt;&lt;/code&gt; work with reactives&lt;/h2&gt;
&lt;p&gt;Of course, we need this if user input is needed for our code to run.&lt;/p&gt;
&lt;p&gt;The supercharged textareas and input elements will bear the &lt;code&gt;ref&lt;/code&gt; attribute&lt;/p&gt;
&lt;p&gt;A lot of things, harsh things are going to be done in this section, so brace
yourself and hold on tight.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #1d2021&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;parseDefaultRefValue&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;let&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;parsed&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #D3869B&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;try&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// If the passed key is a function, run it&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// and store the value&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// I&#39;m sorry, but we need to use eval here&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;parsed&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; eval(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;`&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;getAttribute&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;ref-default&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;)()&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;`&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;catch&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;e&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;parsed&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;getAttribute&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;ref-default&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;parsed&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;assignDefaultRefsToInputs&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;__refs__&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;] &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;parseDefaultRefValue&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// Select input and textarea elements containing the&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// &#39;ref&#39; attribute, where the attr. value refers to any&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// key in the __refs__ store.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// The `ref-default` contains the default value for the `ref`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// eg.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// &amp;#x3C;textarea ref=&quot;name&quot;&gt;&amp;#x3C;/textarea&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #83A598&quot;&gt;document&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;input[ref], textarea[ref]&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// Keep a ref to the ref!! Because we don&#39;t want to&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// lose it in event listeners&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;getAttribute&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// lazily update default values&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;window&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;addEventListener&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;load&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;assignDefaultRefsToInputs&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;))&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;addEventListener&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;input&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// again, a dumb reference to the ref&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;elRef&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// preserve default value&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;defaultVal&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;parseDefaultRefValue&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// Set whatever value is typed as the ref value&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// else, the default value&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;__refs__&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;elRef&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;] &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;!==&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;?&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;defaultVal&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #FB4934&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;__refs__&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;elRef&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;] &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;!==&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;defaultVal&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// Keep rest of the input/textarea elements in sync&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;        Array&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;document&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;input[ref], textarea[ref]&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// Find input/textareas with same refs&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;filter&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;getAttribute&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #B8BB26&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;===&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;elRef&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #928374; font-style: italic&quot;&gt;// Keep their value in sync&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FABD2F&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&gt;&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #8EC07C&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;__refs__&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #83A598&quot;&gt;elRef&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;]))&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A89984&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #EBDBB2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A89984&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;we-re-almost-done&quot;&gt;We&#39;re almost done!&lt;/h2&gt;
&lt;p&gt;Now the only thing that remains is to write some HTML to check whether
everything works! So, here we go!! Some more things to note here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can use multiple stores!! However, if you redeclare a key in the latter
store, it will take precedence, not the first one&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- &lt;Codepen slug=&quot;wvWbNqo&quot; title=&quot;Reactivity Anywhere!!&quot; result=&quot;result&quot; height=&quot;500&quot;/&gt; --&gt;
&lt;h2 id=&quot;why-something-like-this-would-be-great-to-use-according-to-me&quot;&gt;Why something like this would be great to use (according to me)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It will allow HTML to do its work and JS to do its own. It&#39;s not like &quot;All
HTML!&quot; or &quot;All JS!&quot; but harmony between the two (not to mention CSS here) that
will appreciate the job these languages have to do.&lt;/li&gt;
&lt;li&gt;Minimal overhead. As I said earlier, no virtual DOM, only real DOM (credits to
&lt;a href=&quot;https://svelte.dev&quot;&gt;Svelte&lt;/a&gt;) with some objects in memory&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;limitations&quot;&gt;Limitations&lt;/h2&gt;
&lt;p&gt;You&#39;re going to think over this :) because this is just a crude implementation
of an idea. So, feel free to critically think over it.&lt;/p&gt;
&lt;h2 id=&quot;ending-notes&quot;&gt;Ending notes&lt;/h2&gt;
&lt;p&gt;If you seem to be interested in creating some sort of framework with this,
you&#39;re ready to go (some frameworks, using this idea, might even exist)! I&#39;d
also be happy to help you! Thank you for bearing with me in such a long post!&lt;/p&gt;</content></entry></feed>