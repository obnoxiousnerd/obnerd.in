<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pranav Karawale&#39;s blog</title>
  <subtitle>Blog about some interesting stuff.</subtitle>
  <link href="https://karawale.in/feed.xml" rel="self"/>
  <link href="https://karawale.in/"/>
  <updated>2022-03-20T09:21:24Z</updated>
  <id>https://karawale.in/</id>
  <author>
    <name>Pranav Karawale</name>
    <email>pranav@karawale.in</email>
  </author>
    
    <entry>
      <title>Reactivity Anywhere Without Virtual Dom</title>
      <link href="https://karawale.in/posts/reactivity-anywhere-without-virtual-dom/"/>
      <updated>2020-11-20T00:00:00Z</updated>
      <id>https://karawale.in/posts/reactivity-anywhere-without-virtual-dom/</id>
      <content type="html">&lt;h1 id=&quot;how-did-this-got-into-my-mind&quot; tabindex=&quot;-1&quot;&gt;How did this got into my mind??&lt;/h1&gt;
&lt;p&gt;Virtual DOM can be referenced as the thing which just &amp;quot;introduced&amp;quot; me to the title of this post. What if we keep aside all that diffing, state stuff, and focus on one thing: reactivity between the JavaScript and the DOM. Well, most of us are using libraries just to achieve this reactivity in our apps. But most of them implement a virtual DOM which keeps track of all the tags, states, variables, objects, and whatnot and then syncs them with the real DOM. As said, things might get a little crazy doing all this stuff. So I just decided, why not just implement a crude example of all this &amp;quot;virtual DOM&amp;quot; thing without virtual DOM. Is this even achievable?? The answer is (0.5 * yes)!! For the sake of this post, let us call it &amp;quot;Reactivity Anywhere.&amp;quot;&lt;/p&gt;
&lt;h1 id=&quot;disclaimer&quot; tabindex=&quot;-1&quot;&gt;Disclaimer&lt;/h1&gt;
&lt;p&gt;This post might have things that seem vague and senseless. Also don&#39;t take things too seriously here, take them as just a thought. Reader discretion is advised.&lt;/p&gt;
&lt;h1 id=&quot;lets-start&quot; tabindex=&quot;-1&quot;&gt;Let&#39;s Start!!&lt;/h1&gt;
&lt;h2 id=&quot;prerequisites&quot; tabindex=&quot;-1&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A web browser&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;defining-the-global-variablesprecisely-stores&quot; tabindex=&quot;-1&quot;&gt;Defining the global variables(precisely, stores)&lt;/h1&gt;
&lt;p&gt;To keep track of what goes here and there, we need some global variables to preserve and mutate all the states.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #0b0e14&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; __refs__ &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; {}&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; __reactives__ &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; []&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; __reactiveEl__ &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; document&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;[reactive]&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;reactive&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;obj&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;/*Add logic*/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;__updateDOM__&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;/*Add logic*/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is just everything we need for the logic. The variables whose names start and end with double underscores are &lt;a href=&quot;https://github.com/facebook/react/blob/3ebf05183dfcb8eadfc41a9e19559d835fd9b77e/packages/react/index.js#L71&quot;&gt;internals&lt;/a&gt;.
We will only store two things: references to the elements, and, of course, the reactive variables.&lt;/p&gt;
&lt;h2 id=&quot;but-this-seems-like-virtual-dom&quot; tabindex=&quot;-1&quot;&gt;But this seems like virtual DOM!!!&lt;/h2&gt;
&lt;p&gt;But I&#39;m sorry, this is not the virtual DOM you think:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We will not be diffing the whole element tree for every single change; only and only the affected element will be mutated (less carbon dioxide)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;determining-reactive-elements&quot; tabindex=&quot;-1&quot;&gt;Determining &lt;code&gt;reactive&lt;/code&gt; elements&lt;/h1&gt;
&lt;p&gt;To keep specificity and refrain from scanning the whole DOM, we will just handpick special elements that work with our module. So, any element that has the &lt;code&gt;reactive&lt;/code&gt; attribute (&lt;code&gt;&amp;lt;element reactive&amp;gt;&amp;lt;/element&amp;gt;&lt;/code&gt;), will only be able to use the special reactive powers.&lt;/p&gt;
&lt;p&gt;To access the reactive elements from the store, we will use the ES6 string interpolation syntax. So, to access the &lt;code&gt;count&lt;/code&gt;, we will write&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #0b0e14&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #39BAE680&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #39BAE6&quot;&gt;h1&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;reactive&lt;/span&gt;&lt;span style=&quot;color: #39BAE680&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;The time is ${count}&lt;/span&gt;&lt;span style=&quot;color: #39BAE680&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #39BAE6&quot;&gt;h1&lt;/span&gt;&lt;span style=&quot;color: #39BAE680&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;the-refs&quot; tabindex=&quot;-1&quot;&gt;The &lt;code&gt;__refs__&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;Here, we will store the values of the object passed in the &lt;code&gt;reactive&lt;/code&gt; function.&lt;/p&gt;
&lt;h1 id=&quot;the-reactives&quot; tabindex=&quot;-1&quot;&gt;The &lt;code&gt;__reactives__&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;This is just an array containing live references of the DOM Elements.&lt;/p&gt;
&lt;h1 id=&quot;the-reactive&quot; tabindex=&quot;-1&quot;&gt;The &lt;code&gt;reactive()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;This function is basically a store where you&#39;d be storing all the reactive stuff.
The definition of the function is surprisingly simple:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #0b0e14&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;reactive&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;obj&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;//Loop through the string&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #39BAE6&quot;&gt;Object&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;keys&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(obj)&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;((&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;key&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// defineProperty, anyone??&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// We want to maintain reactivity, so we are using custom&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// getters and setters&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #39BAE6&quot;&gt;Object&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;defineProperty&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(__refs__&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; key&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;() {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; obj[key]&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      }&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// This shows an interesting aspect of the logic.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// This will update the target element everytime&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// something changes.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;val&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;        obj[key] &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; val&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;__updateDOM__&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(key)&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      }&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    })&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// Think of this as an initial render&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;__updateDOM__&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(key)&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  })&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// This is an important step otherwise&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// everything is useless&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; __refs__&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;the-updatedom&quot; tabindex=&quot;-1&quot;&gt;The &lt;code&gt;__updateDOM__()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;This is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Rosetta_(software)#:~:text=Rosetta%20is%20a%20dynamic%20binary%20translator%20developed,application%20compatibility%20layer%20between%20different%20CPU%20architectures&quot;&gt;Rosetta&lt;/a&gt; for the &lt;code&gt;reactive&lt;/code&gt; DOM Elements and the &lt;code&gt;__refs__&lt;/code&gt;. This function is also relative simple in its definition:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #0b0e14&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// Ref can be any key from the __refs__ store&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;__updateDOM__&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// This is to check whether we want to update a specific ref value&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (ref) {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    __reactives__&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// filter out the elements we need&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;filter&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;((&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;reactive&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; reactive&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;dataset&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;ref &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;===&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; ref)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;((&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;reactive&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;let&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; ref &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; reactive&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;dataset&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// Interacting with the DOM&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// Nullish coalescing, anybody?&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;        reactive&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;textContent &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; __refs__[ref] &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;??&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      })&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// UPDATE ALL!!&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    __reactives__&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;((&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;reactive&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;let&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; ref &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; reactive&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;dataset&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// Interacting with the DOM&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// Nullish coalescing, anybody?&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      reactive&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;textContent &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; __refs__[ref] &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;??&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    })&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;finding-all-the-reactive-variables-and-bootstrapping-them&quot; tabindex=&quot;-1&quot;&gt;Finding all the reactive variables and bootstrapping them&lt;/h1&gt;
&lt;p&gt;This can be wrapped as an IIFE (Immediately Invoked Function Expression) but I don&#39;t consider doing it for the sake of simplicity. So, here we go!!&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #0b0e14&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// Get live elements&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; __reactiveEl__ &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; document&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;[reactive]&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;__reactiveEl__&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;((&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// Match the `count` between &amp;lt;h1 reactive&amp;gt;${count}&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; refs &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; el&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;innerHTML&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;match&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #95E6CB&quot;&gt;/\${([&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;^&lt;/span&gt;&lt;span style=&quot;color: #95E6CB&quot;&gt;}]&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #95E6CB&quot;&gt;)}/&lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;g&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// If the refs exist&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (refs) {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    refs&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;((&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// extract it&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; dataRef &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; ref&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;split&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;)[&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;split&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;)[&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;trim&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// insert a special span element with the element&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// and store the key name in the `data-ref` attribute&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      el&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;innerHTML &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; el&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;innerHTML&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;replace&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;        ref&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;`&amp;lt;span class=&amp;quot;reactivity-anywhere&amp;quot; data-ref=&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;dataRef&lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      )&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    })&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// Push the span element in __reactives__&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    __reactives__&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;push&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;span.reactivity-anywhere&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;))&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;})&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// Initialize all the magic!!&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;__updateDOM__&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;making-input-and-textarea-work-with-reactives&quot; tabindex=&quot;-1&quot;&gt;Making &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; work with reactives&lt;/h1&gt;
&lt;p&gt;Of course, we need this if user input is needed for our code to run.&lt;/p&gt;
&lt;p&gt;The supercharged textareas and input elements will bear the &lt;code&gt;ref&lt;/code&gt; attribute&lt;/p&gt;
&lt;p&gt;A lot of things, harsh things are going to be done in this section, so brace yourself and hold on tight.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #0b0e14&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;parseDefaultRefValue&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;let&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; parsed &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;try&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// If the passed key is a function, run it&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// and store the value&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// I&amp;#39;m sorry, but we need to use eval here&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    parsed &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;eval&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;`(&lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;getAttribute&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;ref-default&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;)()`&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  } &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;catch&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (e) {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    parsed &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; el&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;getAttribute&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;ref-default&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; parsed&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;assignDefaultRefsToInputs&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;ref&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  __refs__[ref] &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;parseDefaultRefValue&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(el)&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// Select input and textarea elements containing the&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// &amp;#39;ref&amp;#39; attribute, where the attr. value refers to any&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// key in the __refs__ store.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// The `ref-default` contains the default value for the `ref`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// eg.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// &amp;lt;textarea ref=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;document&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;input[ref], textarea[ref]&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;((&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// Keep a ref to the ref!! Because we don&amp;#39;t want to&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// lose it in event listeners&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; ref &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; el&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;getAttribute&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;ref&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (ref) {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// lazily update default values&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    window&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;addEventListener&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;load&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; () &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;assignDefaultRefsToInputs&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(el&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; ref))&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    el&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;addEventListener&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; () &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// again, a dumb reference to the ref&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; elRef &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; ref&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// preserve default value&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; defaultVal &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;parseDefaultRefValue&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(el)&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// Set whatever value is typed as the ref value&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// else, the default value&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      __refs__[elRef] &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; el&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;value &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;!==&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;?&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; el&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;value &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; defaultVal&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (__refs__[elRef] &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;!==&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; defaultVal) {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// Keep rest of the input/textarea elements in sync&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #39BAE6&quot;&gt;Array&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(document&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;input[ref], textarea[ref]&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// Find input/textareas with same refs&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;filter&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;((&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; el&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;getAttribute&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;ref&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;===&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; elRef)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;// Keep their value in sync&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;((&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;el&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (el&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;value &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; __refs__[elRef]))&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    })&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;})&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;were-almost-done&quot; tabindex=&quot;-1&quot;&gt;We&#39;re almost done!&lt;/h1&gt;
&lt;p&gt;Now the only thing that remains is to write some HTML to check whether everything works!
So, here we go!!
Some more things to note here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can use multiple stores!! However, if you redeclare a key in the latter store, it will take precedence, not the first one&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- &lt;Codepen slug=&quot;wvWbNqo&quot; title=&quot;Reactivity Anywhere!!&quot; result=&quot;result&quot; height=&quot;500&quot;/&gt; --&gt;
&lt;h1 id=&quot;why-something-like-this-would-be-great-to-use-according-to-me&quot; tabindex=&quot;-1&quot;&gt;Why something like this would be great to use (according to me)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;It will allow HTML to do its work and JS to do its own. It&#39;s not like &amp;quot;All HTML!&amp;quot; or &amp;quot;All JS!&amp;quot; but harmony between the two (not to mention CSS here) that will appreciate the job these languages have to do.&lt;/li&gt;
&lt;li&gt;Minimal overhead. As I said earlier, no virtual DOM, only real DOM (credits to &lt;a href=&quot;https://svelte.dev/&quot;&gt;Svelte&lt;/a&gt;) with some objects in memory&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;limitations&quot; tabindex=&quot;-1&quot;&gt;Limitations&lt;/h1&gt;
&lt;p&gt;You&#39;re going to think over this :) because this is just a crude implementation of an idea. So, feel free to critically think over it.&lt;/p&gt;
&lt;h1 id=&quot;ending-notes&quot; tabindex=&quot;-1&quot;&gt;Ending notes&lt;/h1&gt;
&lt;p&gt;If you seem to be interested in creating some sort of framework with this, you&#39;re ready to go (some frameworks, using this idea, might even exist)! I&#39;d also be happy to help you! Thank you for bearing with me in such a long post!&lt;/p&gt;
</content>
    </entry>
    
    <entry>
      <title>How to Keep Your Firebase Project Safe and Secure from everyone</title>
      <link href="https://karawale.in/posts/how-to-keep-your-firebase-config-safe/"/>
      <updated>2020-12-18T00:00:00Z</updated>
      <id>https://karawale.in/posts/how-to-keep-your-firebase-config-safe/</id>
      <content type="html">&lt;p&gt;After doing a couple of open source Firebase projects (web apps, I mean), I feel like I&#39;m experienced* enough to write this post. So if I say something wrong here, kindly let me know here.&lt;/p&gt;
&lt;h1 id=&quot;why-is-this-necessary&quot; tabindex=&quot;-1&quot;&gt;Why is this necessary?&lt;/h1&gt;
&lt;p&gt;I have a secret here(not really, just some people don&#39;t know about it). &lt;strong&gt;Your Firebase config&lt;/strong&gt;, which you might have been wondering where to hide, &lt;strong&gt;is publicly visible&lt;/strong&gt;(if you use Firebase hosting). Don&#39;t believe me? Go to the index page any site which uses Firebase hosting, and just append &amp;quot;/__/firebase/init.js&amp;quot; (eg. &lt;code&gt;someapp.web.app/__/firebase/init.js&lt;/code&gt;) and visit it, and you&#39;ll remain surprised by the result. This is something which is not discovered by me, its actually written in the &lt;a href=&quot;https://firebase.google.com/docs/hosting/reserved-urls&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;protecting-your-project&quot; tabindex=&quot;-1&quot;&gt;Protecting your project&lt;/h1&gt;
&lt;h2 id=&quot;firestore-datastore-and-firebase-storage&quot; tabindex=&quot;-1&quot;&gt;Firestore datastore and Firebase Storage&lt;/h2&gt;
&lt;p&gt;This is perhaps the most important part of your backend which possibly contains sensitive data, which must be protected and it might cause harm when in the hands of bad people. So how to protect these? Well, here are some steps:&lt;/p&gt;
&lt;h3 id=&quot;start-in-production-mode&quot; tabindex=&quot;-1&quot;&gt;&amp;quot;Start in production mode&amp;quot;&lt;/h3&gt;
&lt;p&gt;When setting up Firestore and storage, you might get asked whether to start the resource in production mode or test mode. So always choose &amp;quot;Production mode&amp;quot; / &amp;quot;Locked mode&amp;quot;. The reason is that this mode introduces some security rules that will block access from every client. Don&#39;t fear though, we can still change them.&lt;/p&gt;
&lt;h3 id=&quot;configure-security-rules&quot; tabindex=&quot;-1&quot;&gt;Configure &lt;a href=&quot;https://firebase.google.com/docs/rules&quot;&gt;security rules&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Security rules are very great to have. Using these, you can decide who can have access to data and who cannot. These are written in .rules files and have a similar syntax to JavaScript which can be understood in the docs. Since we used production mode, you will see this particular rule in your security rules:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #0b0e14&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #bfbdb6&quot;&gt;match /{document=**} {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #bfbdb6&quot;&gt;    allow read, write: if false;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #bfbdb6&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #bfbdb6&quot;&gt;//Don&amp;#39;t remove this rule, or else your project is gone&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #bfbdb6&quot;&gt;//and keep this rule at end (this comment is added by me)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #bfbdb6&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which literally means that no client can access your database and storage, which is sometimes not needed. So we can introduce changes in how we store data.
If you&#39;ve used Firebase, you know that for every user that signs up for your app, they are assigned a unique ID (or UID). We can store resources based on their UID, for example, in a todo app, one can store user&#39;s data in their database at path &lt;code&gt;/todos/users-uid&lt;/code&gt; which makes sense. So in this, we can add a new rule:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #0b0e14&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #bfbdb6&quot;&gt;match /todos/{uid=\*\*} {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #bfbdb6&quot;&gt;allow read, write: if request.auth != null and request.auth.uid == uid;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #bfbdb6&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #bfbdb6&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that if anyone accesses any path under todos collection, they should be authenticated to the app, and if they try to access a specific UID in the collection, the database will only allow access if they access data under their UID.
Do the same for Firebase storage as well.&lt;/p&gt;
&lt;h3 id=&quot;use-seperate-api-keys-if-they-are-used-only-for-one-purpose&quot; tabindex=&quot;-1&quot;&gt;Use seperate API keys if they are used only for one purpose&lt;/h3&gt;
&lt;p&gt;Suppose you are also developing a CLI for your app (&lt;a href=&quot;https://github.com/obnoxiousnerd/lookahead&quot;&gt;which I am doing&lt;/a&gt;), you might need your API key for refreshig the user&#39;s JWT (which I am doing :) ). So just don&#39;t use the same Firebase config API key, create a new one which has only access to the things we need, in this case, we need access to the Token Service API. So you can move to the &lt;a href=&quot;https://console.developers.google.com/&quot;&gt;Google APIs dashboard&lt;/a&gt;, and then select your preferred project.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When you&#39;re in the dashboard, go to the &#39;Credentials&#39; section.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/uocb2U3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then in the top app bar, click the &amp;quot;Create Credentials&amp;quot; button. A drop down will appear. Select &amp;quot;API key&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then it will show a dialog like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/os9Ptgt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then that key will appear in the &amp;quot;Keys&amp;quot; section. Then, in that list, find the API key we just created, and then click on the pencil icon.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scroll down and you&#39;ll find a section &amp;quot;API restrictions&amp;quot;. Select the option &amp;quot;Restrict key&amp;quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then a dropdown will appear with text &amp;quot;Select APIs&amp;quot;. Then select the services which you want the API key to be working with. I&#39;ll select the Token Service API here.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/DOWZTMi.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Just hit the &amp;quot;Save&amp;quot; button.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then in the keys&#39; section, you&#39;ll find that the API key has a green check on it. It means that it is now secure and you&#39;ll bear less damage if it got leaked.&lt;/p&gt;
&lt;h3 id=&quot;if-you-need-to-have-your-api-keys-in-your-repo&quot; tabindex=&quot;-1&quot;&gt;If you need to have your API keys in your repo&lt;/h3&gt;
&lt;p&gt;If your code is public, and you need your API keys for testing or just to keep everything modular and smooth, encrypt it and then save it. I also use a similar approach in my CLI app, beacuse I need it for CI. You can use any encryption method which uses public-private key pair and then store the encrypted file in your repo and then decrypt it whenever needed.&lt;/p&gt;
&lt;h3 id=&quot;respect-firebase-server-credentials&quot; tabindex=&quot;-1&quot;&gt;Respect Firebase server credentials&lt;/h3&gt;
&lt;p&gt;Now this is important. We&#39;ve been talking about the general Firebase config which we add in our web apps, but now, I&#39;m talking about server credentials, which are used by the Admin SDKs. These are allowed access everywhere; no one can deny them. So treat them with respect and keep them as a secret only, don&#39;t show them off or else you&#39;re done.&lt;/p&gt;
&lt;h1 id=&quot;ending-thoughts&quot; tabindex=&quot;-1&quot;&gt;Ending thoughts&lt;/h1&gt;
&lt;p&gt;Good job if you&#39;ve made it this far. Now you can just chill back and write some code for your project. Always tell me if you got stuck in any of the steps. Have a nice day :)&lt;/p&gt;
</content>
    </entry>
    
    <entry>
      <title>Angularfire V7 Auth Guard</title>
      <link href="https://karawale.in/posts/angularfire-v7-auth-guard/"/>
      <updated>2021-06-08T00:00:00Z</updated>
      <id>https://karawale.in/posts/angularfire-v7-auth-guard/</id>
      <content type="html">&lt;p&gt;As of now, the AngularFire v7(&lt;strong&gt;&amp;quot;Beta&amp;quot;&lt;/strong&gt;) does not have an implementation for an auth guard(which I really need), so I went ahead, copied the original auth guard code (from v6), and refactored it to make it compatible with v7.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This code works on Angular 12. I haven&#39;t tested it for older versions, but it should work.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here&#39;s the code:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #0b0e14&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; { Injectable } &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;@angular/core&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; { Auth } &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;@angular/fire&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; { authState } &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;@angular/fire/auth&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  ActivatedRouteSnapshot&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  CanActivate&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  Router&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  RouterStateSnapshot&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  UrlTree&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;} &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;@angular/router&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; { User } &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;@firebase/auth&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; { Observable&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; of&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; pipe&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; UnaryFunction } &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;rxjs&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; { map&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; switchMap&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; take } &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;rxjs/operators&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;AuthPipeGenerator&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;next&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;ActivatedRouteSnapshot&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;RouterStateSnapshot&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;AuthPipe&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;AuthPipe&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;UnaryFunction&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;Observable&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;User&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #39BAE6&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;Observable&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #39BAE6&quot;&gt;boolean&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #39BAE6&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #39BAE6&quot;&gt;any&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;[]&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; loggedIn&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;AuthPipe&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;((&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;!!&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;user)&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt; * Auth guard based on AngularFire v6 AngularFireAuthGuard.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt; * Check out the v6 implementation here: https://git.io/JZOcy&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt; */&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #E6B673&quot;&gt;@&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;Injectable&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;({&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  providedIn&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;})&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;AuthGuard&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;implements&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #39BAE6&quot;&gt;CanActivate&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;constructor&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;auth&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;Auth&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;router&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;Router&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) {}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;canActivate&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;route&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;ActivatedRouteSnapshot&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;RouterStateSnapshot&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  )&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;Observable&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #39BAE6&quot;&gt;boolean&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;UrlTree&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #39BAE6&quot;&gt;Promise&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;boolean &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; UrlTree&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; boolean&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; UrlTree {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; authPipeFactory &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      (route&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;data&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;authGuardPipe &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;as&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;AuthPipeGenerator&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;||&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (() &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; loggedIn)&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;authState&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #39BAE6; font-style: italic&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;auth)&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;pipe&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;take&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;authPipeFactory&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(route&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; state)&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;((&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;can&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;typeof&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; can &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;===&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;#39;boolean&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; can&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;        } &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #39BAE6&quot;&gt;Array&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;isArray&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(can)) {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #39BAE6; font-style: italic&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;router&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;createUrlTree&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(can)&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;        } &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #39BAE6; font-style: italic&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;router&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;parseUrl&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(can)&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;        }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;      })&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    )&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;canActivate&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;pipe&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;AuthPipeGenerator&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; ({&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  canActivate&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; [AuthGuard]&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  data&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; { authGuardPipe&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; pipe }&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;})&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; isNotAnonymous&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;AuthPipe&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  (&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;!!&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;user &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;!&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;isAnonymous&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; idTokenResult &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;switchMap&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;((&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;User&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #39BAE6&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  user &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;?&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; user&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;getIdTokenResult&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;() &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;of&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; emailVerified&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;AuthPipe&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  (&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;!!&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;user &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; user&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;emailVerified&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; customClaims &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;pipe&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  idTokenResult&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;((&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;idTokenResult&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (idTokenResult &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;?&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; idTokenResult&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;claims &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; []))&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;hasCustomClaim&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;claim&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #39BAE6&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;AuthPipe&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;claim&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;pipe&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    customClaims&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;((&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;claims&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; claims&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(claim))&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  )&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;redirectUnauthorizedTo&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;redirect&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #39BAE6&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #39BAE6&quot;&gt;any&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;[]) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;AuthPipe&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;redirect&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;pipe&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    loggedIn&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;((&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;loggedIn&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; loggedIn &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;||&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; redirect)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  )&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;redirectLoggedInTo&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;redirect&lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #39BAE6&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #39BAE6&quot;&gt;any&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;[]) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #59C2FF&quot;&gt;AuthPipe&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;redirect&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;pipe&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    loggedIn&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;((&lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;loggedIn&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; (loggedIn &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; redirect) &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;||&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;  )&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;sup&gt;Note: If you are an contributor of the Angularfire library, you can steal this code and cram it in the library. Just keep a link to this article ;)&lt;/sup&gt;&lt;/p&gt;
</content>
    </entry>
    
    <entry>
      <title>One Liner for rimraf that gets the job done</title>
      <link href="https://karawale.in/posts/one-liner-for-rimraf-that-gets-the-job-done/"/>
      <updated>2021-07-10T00:00:00Z</updated>
      <id>https://karawale.in/posts/one-liner-for-rimraf-that-gets-the-job-done/</id>
      <content type="html">&lt;p&gt;I have been striving to cut down on node_modules. Most of the times, I need rimraf to delete a folder (usually &lt;code&gt;public&lt;/code&gt;/&lt;code&gt;dist&lt;/code&gt;/&lt;code&gt;build&lt;/code&gt;) and to keep the project cross platform. So, here is a one-liner to delete a folder/file:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #0b0e14&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;node -e &lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;quot;require(&amp;#39;fs&amp;#39;).rmSync(&amp;#39;PATH&amp;#39;,{recursive:true,force:true})&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: Replace &lt;code&gt;PATH&lt;/code&gt; by the path to the folder/file. This works the same as &lt;code&gt;rm -rf&lt;/code&gt; command, but cross-platform.&lt;/p&gt;
</content>
    </entry>
    
    <entry>
      <title>Upgrading your Ubuntu LTS distro in WSL</title>
      <link href="https://karawale.in/posts/upgrading-ubuntu-lts-wsl/"/>
      <updated>2022-01-20T00:00:00Z</updated>
      <id>https://karawale.in/posts/upgrading-ubuntu-lts-wsl/</id>
      <content type="html">&lt;blockquote&gt;
&lt;p&gt;Note: This post was written after upgrading my Ubuntu 20.04 LTS, so I don&#39;t have any relevant screenshots/logs at the moment. Things are subject to change in the future.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I was configuring my git settings when I realised that git&#39;s version was an older one (2.25). So I tried to update, but it didn&#39;t do that and instead told that it&#39;s already up-to-date. It didn&#39;t took long to realise that the newer versions are on the repositories of the newer versions and so I need to upgrade my WSL distro. Here are the steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;sudo do-release-upgrade&lt;/code&gt;
At this stage you will probably see some error telling you that it couldn&#39;t find any release, that is because it is looking for LTS releases but there isn&#39;t any (as of writing this), so you need to change some configuration files.
&lt;ul&gt;
&lt;li&gt;Open the &lt;code&gt;/etc/update-manager/release-upgrades&lt;/code&gt;, and set the &lt;code&gt;Prompt&lt;/code&gt; from &lt;code&gt;lts&lt;/code&gt; to &lt;code&gt;normal&lt;/code&gt; (only do this if you are OK with a non-LTS version). Now you can run the original command again.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It will start pulling the repositories of the newest upgradable release. If you notice that the installer is hanging and then terminating, that is because of it trying to start &lt;code&gt;snap&lt;/code&gt;. So, for the upgrade to proceed, you need to remove &lt;code&gt;snap&lt;/code&gt;. Don&#39;t worry, if you need it, you can install it back after the upgrade (&lt;a href=&quot;https://discourse.ubuntu.com/t/using-snapd-in-wsl2/12113&quot;&gt;why is snap even in WSL when it doesn&#39;t work by default? ¯\_(ツ)_/¯&lt;/a&gt;). Remove the &lt;code&gt;snap&lt;/code&gt; and &lt;code&gt;snapd&lt;/code&gt; packages, you&#39;d be good to go.&lt;/li&gt;
&lt;li&gt;Now follow the prompts. At one point it will ask for permission to restart all services. Grant the permission and let it continue.&lt;/li&gt;
&lt;li&gt;BOOM! You have upgraded to a newer version! Hope you enjoy your distro with a breath of fresh air.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;I could find this on &lt;a href=&quot;https://www.hughrawlinson.me/posts/2021/06/04/solved-do-release-upgrade-hangs-in-ubuntu-on-wsl&quot;&gt;another post&lt;/a&gt; by Hugh Rawlinson, however their Ubuntu&#39;s version was 18.04 LTS, but the steps are pretty much the same.&lt;/p&gt;
</content>
    </entry>
    
    <entry>
      <title>Assigning equal amount of tasks among people</title>
      <link href="https://karawale.in/posts/assigning-equal-amount-of-tasks-among-people/"/>
      <updated>2022-02-26T00:00:00Z</updated>
      <id>https://karawale.in/posts/assigning-equal-amount-of-tasks-among-people/</id>
      <content type="html">&lt;h1 id=&quot;context&quot; tabindex=&quot;-1&quot;&gt;Context&lt;/h1&gt;
&lt;p&gt;So I had this edge-case scenario where I was to assign tasks among the four of us for a video project. We had initially decided to take the tasks numerically, but then I thought, &amp;quot;let&#39;s make this randomized&amp;quot;. The tasks were equally dividable, and my team members gave in, ergo I created this little script to do the work.&lt;/p&gt;
&lt;h1 id=&quot;finding-the-right-thing-to-do-the-job&quot; tabindex=&quot;-1&quot;&gt;Finding the right thing to do the job&lt;/h1&gt;
&lt;p&gt;Obviously, TypeScript is the first option to do this, but the interface for random numbers isn&#39;t the most pleasing one for this situation. There&#39;s also shell scripts (&lt;code&gt;fish&lt;/code&gt; is my pick), but I never dealt with random numbers in the command line. So then its Python which will be used to do the job.&lt;/p&gt;
&lt;h2 id=&quot;randomshuffle&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;random.shuffle()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Checking &lt;a href=&quot;https://stackoverflow.com/a/473983&quot;&gt;this question on StackOverflow&lt;/a&gt;, there was a function in the &lt;code&gt;random&lt;/code&gt; module of Python to shuffle the lists &lt;em&gt;in place&lt;/em&gt;. Phew. I thought I was going to write a bunch of more stuff for shuffling the lists and stuff 😅&lt;/p&gt;
&lt;p&gt;So the plan was clear, use this function and build code around it and get the job done.&lt;/p&gt;
&lt;h1 id=&quot;the-script&quot; tabindex=&quot;-1&quot;&gt;The script&lt;/h1&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #0b0e14&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; random&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;# Obviously these are not the real names and tasks.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;people &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;quot;Jack&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;quot;Jamie&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;tasks &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; [&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;quot;Going for the messages&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;quot;Water the plants&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;quot;Check the mailbox&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;quot;Wash the clothes&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;quot;Clean the plates&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;quot;Cook lunch&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;task_per_person &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;len&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(tasks) &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;len&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(people)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;# This shouldn&amp;#39;t continue if the tasks cannot be divided equally. If this&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;# is the case, then one has to remove some number of tasks to make the&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;# number correct, or else make a custom solution.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; task_per_person &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;!=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;raise&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #39BAE6&quot;&gt;Exception&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;quot;Tasks cannot be equally divided&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;c &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; i &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;range&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #39BAE6&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(task_per_person))&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;color: #ACB6BF8C; font-style: italic&quot;&gt;# Shuffling the tasks list is totally optional&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;	random&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;shuffle&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(tasks)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;	shuffled &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; people&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;	random&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #FFB454&quot;&gt;shuffle&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(shuffled)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; person &lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; shuffled&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6B3&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;		&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;print&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF8F40&quot;&gt;f&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #95E6CB&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;tasks[c]&lt;/span&gt;&lt;span style=&quot;color: #95E6CB&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt; : &lt;/span&gt;&lt;span style=&quot;color: #95E6CB&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;person&lt;/span&gt;&lt;span style=&quot;color: #95E6CB&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #AAD94C&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt;		c &lt;/span&gt;&lt;span style=&quot;color: #F29668&quot;&gt;+=&lt;/span&gt;&lt;span style=&quot;color: #BFBDB6&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #D2A6FF&quot;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;on-what-would-it-wont-work&quot; tabindex=&quot;-1&quot;&gt;On what would it won&#39;t work?&lt;/h2&gt;
&lt;p&gt;This won&#39;t work when the tasks are not equally assignable. For instance. 8 tasks among 4 people is possible, but 7 tasks among 3 isn&#39;t. I&#39;ll probably write code for this too in the future.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;small&gt;The names in the snippet are a reference to an Ed Sheeran&#39;s song. Check if you can find out ;)&lt;/small&gt;&lt;/p&gt;
</content>
    </entry>
    
    <entry>
      <title>I&#39;m moving my blog to Eleventy</title>
      <link href="https://karawale.in/posts/moving-to-eleventy/"/>
      <updated>2022-03-17T00:00:00Z</updated>
      <id>https://karawale.in/posts/moving-to-eleventy/</id>
      <content type="html">&lt;p&gt;You read the title. I&#39;ve migrated my site over to &lt;a href=&quot;https://11ty.dev/&quot;&gt;Eleventy&lt;/a&gt;, from &lt;a href=&quot;https://astro.build/&quot;&gt;Astro&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;backstory&quot; tabindex=&quot;-1&quot;&gt;Backstory&lt;/h1&gt;
&lt;p&gt;First of all, I always wanted to love &lt;a href=&quot;https://11ty.dev/&quot;&gt;Eleventy (or 11ty)&lt;/a&gt;. When I discovered it (in 2020), it was love at first sight, and I wanted to build my site with it. But that time the project was probably in the beta stage, which reflected by its 0.x version number. Docs were not arranged good enough for me, some things required deep understanding of Eleventy. I felt it&#39;s probably not for me at that stage, and then moved on. Then comes &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt;. I built my site using Hugo. It was fast, like, &lt;em&gt;exceptionally fast&lt;/em&gt;. There were lots of themes/templates to choose from, and I got my site up within a week.
But there was a problem. Hugo basically had very little opportunities for extensibility. Being written Go, which is a compiled language, there was no concept of &amp;quot;plugins&amp;quot; for it. Everything had to be done using scripting. I remember spending an afternoon to write a script to highlight code blocks using &lt;a href=&quot;https://github.com/shikijs/shiki&quot;&gt;Shiki&lt;/a&gt;. In retrospect, it did get the job done, but it was still problematic. If I had went on, it&#39;d been a &amp;quot;script hell&amp;quot; around Hugo to build my site.&lt;/p&gt;
&lt;h1 id=&quot;astro&quot; tabindex=&quot;-1&quot;&gt;Astro&lt;/h1&gt;
&lt;p&gt;Then comes Astro, which I got to know about in May of 2021. It was a very young project, but with a clear vision - to create static sites with on-demand JavaScript. I quickly got in contact with the awesome people making it, and had some good time. I decided to re-build my website in Astro. It was a bold move, I know, making important stuff with beta software is never a good idea. The docs were written very well, and most of the times the answer was in the docs. And the people there in the Discord server were always ready to answer my (sometimes silly) questions. During the process of writing my site in Astro, I had struggled quite a lot due to bugs, in that process I think I was of much use to the Astro community because I was helping other people with issues I faced earlier, reporting bugs on Discord, and sending a couple of pull requests on GitHub. I also implemented &lt;a href=&quot;https://github.com/withastro/astro/releases/tag/astro%400.22.15&quot;&gt;the draft posts feature&lt;/a&gt;(the &lt;code&gt;@obnoxiousnerd&lt;/code&gt;&#39;s me btw), of which I feel very proud of myself. Astro&#39;s team also had decided to rewrite their compiler in Go, which they were successful with. With that I remember finding my website completely broken and then spending more time fixing it. It was good, the grind was good. They also selected me for their &lt;a href=&quot;https://opencollective.com/astrodotbuild/expenses/63326&quot;&gt;Community Recognition Award, January 2022&lt;/a&gt;, which counts as my first earning from contributing to open source, of which I am very grateful of.
But, there&#39;s a few things which were not fitting quite well with my site with Astro, which boils down to a few personal preferences and the beta nature of Astro, as I&#39;m writing this.&lt;/p&gt;
&lt;h2 id=&quot;the-reasons-behind-the-change&quot; tabindex=&quot;-1&quot;&gt;The reasons behind the change&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Beta software. Now no one here is to be blamed for this, it&#39;s always good to be a kind of early adopter for new software. Astro, I think, is doing things the right way, or to be more precise, the way they should be. Astro, &lt;a href=&quot;http://slinkity.dev/&quot;&gt;Slinkity&lt;/a&gt;, &lt;a href=&quot;https://remix.run/&quot;&gt;Remix&lt;/a&gt; are some of the newer tools which are doing the web things the right way, ship HTML, with JS stepping down as the second-in-line. Doing things the right way takes time, and I know it very well. The new compiler in Go unfortunately has some bizarre bug which would throw random errors even on files with the correct syntax. It was a pain to get things fixed with that.&lt;/li&gt;
&lt;li&gt;Personal preferences. Astro, like Hugo or Eleventy, does not have shortcodes[1] as of now (there will be, I know it, probably I&#39;ll implement it if I get the chance), which I absolutely like to use. I was not very pleased with writing JSX-esque components in my Markdown. Also my way of writing and structuring my personal website didn&#39;t align with the structure of a typical Astro project. My code was getting clunky, and it was time to switch. Nunjucks? Boy did I missed it a lot.&lt;/li&gt;
&lt;li&gt;I like the idea of Webmentions, but I was totally not sure how to implement it with Astro. Maybe if someone knows it, they must create a guide for it.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;back-to-eleventy&quot; tabindex=&quot;-1&quot;&gt;Back to Eleventy&lt;/h1&gt;
&lt;p&gt;I was checking on Eleventy after quite a few months now, and looks like they&#39;ve released their first stable version! Looking at this, I check out their docs, this time its well structured and in place, and I just couldn&#39;t resist myself switching to it. Templates, Data files, all that felt like the perfect hole my plugs were not filing. The structure of my site under Hugo with endless extensibility, just what I needed. And so here we are, now.&lt;/p&gt;
&lt;p&gt;With Astro, my website was still sturctured very good and was very modular, and that helped me migrate to Eleventy in just two days. Astro&#39;s very good, give it a try!&lt;/p&gt;
&lt;h1 id=&quot;the-future&quot; tabindex=&quot;-1&quot;&gt;The future&lt;/h1&gt;
&lt;p&gt;So as it stands, I am sticking with Eleventy for now, regarding my website. But that doesn&#39;t mean it&#39;s all over for me and Astro. Astro, and its community will always have a special place in my heart, and I will continue working with Astro with some of my projects (There is already one in the works, and the folks on Astro&#39;s Discord server know about it 😉). Migrating from Astro does give me a sense of me betraying Astro, but I hope I&#39;ll feel better after rambling about this.
And, I will be writing my Projects page in Astro, because I want some dynamic things in it without sacrificing static HTML! There you go, yet another case of extensibility.&lt;/p&gt;
&lt;p&gt;[1]: In Astro, shortcodes basically means using a component written in a framework or Astro&#39;s own templating language. I&#39;ll implement them if its in the plans and if I get it done correctly.&lt;/p&gt;
</content>
    </entry>
    
    <entry>
      <title>Note written on 19 March 2022</title>
      <link href="https://karawale.in/notes/2022-03-19-18-42/"/>
      <updated>2022-03-19T13:12:04Z</updated>
      <id>https://karawale.in/notes/2022-03-19-18-42/</id>
      <content type="html">&lt;p&gt;That&#39;s a very nice way to drop the mic! I like it!&lt;/p&gt;
</content>
    </entry>
    
    <entry>
      <title>Like of https://sia.codes/posts/webmentions-eleventy-in-depth/</title>
      <link href="https://karawale.in/likes/dJCsJQ/"/>
      <updated>2022-03-20T05:32:21Z</updated>
      <id>https://karawale.in/likes/dJCsJQ/</id>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title>Like of https://www.petergoes.nl/blog/my-stab-at-rendering-shadow-dom-server-side/</title>
      <link href="https://karawale.in/likes/855415/"/>
      <updated>2022-03-20T05:45:13Z</updated>
      <id>https://karawale.in/likes/855415/</id>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title>Note written on 20 March 2022</title>
      <link href="https://karawale.in/notes/2022-03-20-14-51/"/>
      <updated>2022-03-20T09:21:24Z</updated>
      <id>https://karawale.in/notes/2022-03-20-14-51/</id>
      <content type="html">&lt;p&gt;Testing webmentions! Send one here if you like :D&lt;/p&gt;
</content>
    </entry>
</feed>